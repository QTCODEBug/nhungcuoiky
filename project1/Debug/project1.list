
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000458c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000213c  0800469c  0800469c  0000569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d8  080067d8  0000806c  2**0
                  CONTENTS
  4 .ARM          00000000  080067d8  080067d8  0000806c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067d8  080067d8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000077d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080067dc  080067dc  000077dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080067e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c4  2000006c  0800684c  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  0800684c  00008730  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c080  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dfc  00000000  00000000  00014115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00015f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a70  00000000  00000000  00016c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fe3  00000000  00000000  000176d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f960  00000000  00000000  0002f6bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aec7  00000000  00000000  0003f01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9ee2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e50  00000000  00000000  000c9f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000cdd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004684 	.word	0x08004684

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08004684 	.word	0x08004684

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <Move>:
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void Move(uint8_t dir){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	if(dir == FORWARD){
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d118      	bne.n	800096e <Move+0x42>
		HAL_GPIO_WritePin(GPIOB, IN1_Pin, 1);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000942:	4844      	ldr	r0, [pc, #272]	@ (8000a54 <Move+0x128>)
 8000944:	f001 fb91 	bl	800206a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, IN2_Pin, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800094e:	4841      	ldr	r0, [pc, #260]	@ (8000a54 <Move+0x128>)
 8000950:	f001 fb8b 	bl	800206a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, IN3_Pin, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800095a:	483e      	ldr	r0, [pc, #248]	@ (8000a54 <Move+0x128>)
 800095c:	f001 fb85 	bl	800206a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, IN4_Pin, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000966:	483b      	ldr	r0, [pc, #236]	@ (8000a54 <Move+0x128>)
 8000968:	f001 fb7f 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN1_Pin, 0);
			HAL_GPIO_WritePin(GPIOB, IN2_Pin, 0);
			HAL_GPIO_WritePin(GPIOB, IN3_Pin, 0);
			HAL_GPIO_WritePin(GPIOB, IN4_Pin, 0);
	}
}
 800096c:	e06e      	b.n	8000a4c <Move+0x120>
	else if(dir == BACKWARD){
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d118      	bne.n	80009a6 <Move+0x7a>
			HAL_GPIO_WritePin(GPIOB, IN1_Pin, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800097a:	4836      	ldr	r0, [pc, #216]	@ (8000a54 <Move+0x128>)
 800097c:	f001 fb75 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_Pin, 1);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000986:	4833      	ldr	r0, [pc, #204]	@ (8000a54 <Move+0x128>)
 8000988:	f001 fb6f 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_Pin, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000992:	4830      	ldr	r0, [pc, #192]	@ (8000a54 <Move+0x128>)
 8000994:	f001 fb69 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN4_Pin, 1);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800099e:	482d      	ldr	r0, [pc, #180]	@ (8000a54 <Move+0x128>)
 80009a0:	f001 fb63 	bl	800206a <HAL_GPIO_WritePin>
}
 80009a4:	e052      	b.n	8000a4c <Move+0x120>
	else if(dir == TURN_LEFT){
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	d118      	bne.n	80009de <Move+0xb2>
			HAL_GPIO_WritePin(GPIOB, IN1_Pin, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009b2:	4828      	ldr	r0, [pc, #160]	@ (8000a54 <Move+0x128>)
 80009b4:	f001 fb59 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_Pin, 1);
 80009b8:	2201      	movs	r2, #1
 80009ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009be:	4825      	ldr	r0, [pc, #148]	@ (8000a54 <Move+0x128>)
 80009c0:	f001 fb53 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_Pin, 1);
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ca:	4822      	ldr	r0, [pc, #136]	@ (8000a54 <Move+0x128>)
 80009cc:	f001 fb4d 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN4_Pin, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009d6:	481f      	ldr	r0, [pc, #124]	@ (8000a54 <Move+0x128>)
 80009d8:	f001 fb47 	bl	800206a <HAL_GPIO_WritePin>
}
 80009dc:	e036      	b.n	8000a4c <Move+0x120>
	else if(dir == TURN_RIGHT){
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d118      	bne.n	8000a16 <Move+0xea>
			HAL_GPIO_WritePin(GPIOB, IN1_Pin, 1);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ea:	481a      	ldr	r0, [pc, #104]	@ (8000a54 <Move+0x128>)
 80009ec:	f001 fb3d 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_Pin, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f6:	4817      	ldr	r0, [pc, #92]	@ (8000a54 <Move+0x128>)
 80009f8:	f001 fb37 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_Pin, 0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a02:	4814      	ldr	r0, [pc, #80]	@ (8000a54 <Move+0x128>)
 8000a04:	f001 fb31 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN4_Pin, 1);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a0e:	4811      	ldr	r0, [pc, #68]	@ (8000a54 <Move+0x128>)
 8000a10:	f001 fb2b 	bl	800206a <HAL_GPIO_WritePin>
}
 8000a14:	e01a      	b.n	8000a4c <Move+0x120>
	else if(dir == STOP){
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d117      	bne.n	8000a4c <Move+0x120>
			HAL_GPIO_WritePin(GPIOB, IN1_Pin, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a22:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <Move+0x128>)
 8000a24:	f001 fb21 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN2_Pin, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2e:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <Move+0x128>)
 8000a30:	f001 fb1b 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN3_Pin, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a3a:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <Move+0x128>)
 8000a3c:	f001 fb15 	bl	800206a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, IN4_Pin, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a46:	4803      	ldr	r0, [pc, #12]	@ (8000a54 <Move+0x128>)
 8000a48:	f001 fb0f 	bl	800206a <HAL_GPIO_WritePin>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40010c00 	.word	0x40010c00

08000a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a58:	b598      	push	{r3, r4, r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a5c:	f000 ffd6 	bl	8001a0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a60:	f000 f92c 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a64:	f000 fa80 	bl	8000f68 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a68:	f000 f964 	bl	8000d34 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000a6c:	f000 f990 	bl	8000d90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a70:	f000 f9de 	bl	8000e30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a74:	f000 fa2a 	bl	8000ecc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
    /* Start the timer for ultrasonic sensor */
  HAL_GPIO_WritePin(GPIOA, LED_Pin, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	487e      	ldr	r0, [pc, #504]	@ (8000c78 <main+0x220>)
 8000a7e:	f001 faf4 	bl	800206a <HAL_GPIO_WritePin>
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
//  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
	SSD1306_Init();
 8000a82:	f000 fb07 	bl	8001094 <SSD1306_Init>
	HAL_TIM_Base_Start(&htim1);
 8000a86:	487d      	ldr	r0, [pc, #500]	@ (8000c7c <main+0x224>)
 8000a88:	f002 fd58 	bl	800353c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8000a8c:	487c      	ldr	r0, [pc, #496]	@ (8000c80 <main+0x228>)
 8000a8e:	f002 fd9f 	bl	80035d0 <HAL_TIM_Base_Start_IT>

    /* Ensure TRIG_PIN is LOW */
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a98:	4877      	ldr	r0, [pc, #476]	@ (8000c78 <main+0x220>)
 8000a9a:	f001 fae6 	bl	800206a <HAL_GPIO_WritePin>
    Move(STOP);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff44 	bl	800092c <Move>
    /* USER CODE BEGIN 3 */
		// Trigger the ultrasonic sensor
	  //SW1 an
//	  SW1 = HAL_GPIO_ReadPin(GPIOA, PA3_Pin);
//	  SW2 = HAL_GPIO_ReadPin(GPIOA, PA4_Pin);
	  if (STATE1){
 8000aa4:	4b77      	ldr	r3, [pc, #476]	@ (8000c84 <main+0x22c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	f000 80c0 	beq.w	8000c2e <main+0x1d6>
		  SSD1306_Clear();
 8000aae:	f000 fd12 	bl	80014d6 <SSD1306_Clear>

		  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // Set TRIG_PIN HIGH
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ab8:	486f      	ldr	r0, [pc, #444]	@ (8000c78 <main+0x220>)
 8000aba:	f001 fad6 	bl	800206a <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COUNTER(&htim1, 0);                      // Reset timer
 8000abe:	4b6f      	ldr	r3, [pc, #444]	@ (8000c7c <main+0x224>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
		  while (__HAL_TIM_GET_COUNTER(&htim1) < 10);            // Wait 10 microseconds
 8000ac6:	bf00      	nop
 8000ac8:	4b6c      	ldr	r3, [pc, #432]	@ (8000c7c <main+0x224>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	d9fa      	bls.n	8000ac8 <main+0x70>
		  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); // Set TRIG_PIN LOW
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad8:	4867      	ldr	r0, [pc, #412]	@ (8000c78 <main+0x220>)
 8000ada:	f001 fac6 	bl	800206a <HAL_GPIO_WritePin>

		  pMillis = HAL_GetTick();
 8000ade:	f000 ffed 	bl	8001abc <HAL_GetTick>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4a68      	ldr	r2, [pc, #416]	@ (8000c88 <main+0x230>)
 8000ae6:	6013      	str	r3, [r2, #0]
		  // Wait for ECHO_PIN to go HIGH
		  while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 10 > HAL_GetTick());
 8000ae8:	bf00      	nop
 8000aea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000aee:	4862      	ldr	r0, [pc, #392]	@ (8000c78 <main+0x220>)
 8000af0:	f001 faa4 	bl	800203c <HAL_GPIO_ReadPin>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d108      	bne.n	8000b0c <main+0xb4>
 8000afa:	4b63      	ldr	r3, [pc, #396]	@ (8000c88 <main+0x230>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f103 040a 	add.w	r4, r3, #10
 8000b02:	f000 ffdb 	bl	8001abc <HAL_GetTick>
 8000b06:	4603      	mov	r3, r0
 8000b08:	429c      	cmp	r4, r3
 8000b0a:	d8ee      	bhi.n	8000aea <main+0x92>
		  Value1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000b0c:	4b5b      	ldr	r3, [pc, #364]	@ (8000c7c <main+0x224>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b12:	4a5e      	ldr	r2, [pc, #376]	@ (8000c8c <main+0x234>)
 8000b14:	6013      	str	r3, [r2, #0]

		  pMillis = HAL_GetTick();
 8000b16:	f000 ffd1 	bl	8001abc <HAL_GetTick>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a5a      	ldr	r2, [pc, #360]	@ (8000c88 <main+0x230>)
 8000b1e:	6013      	str	r3, [r2, #0]
		  // Wait for ECHO_PIN to go LOW
		  while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000b20:	bf00      	nop
 8000b22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b26:	4854      	ldr	r0, [pc, #336]	@ (8000c78 <main+0x220>)
 8000b28:	f001 fa88 	bl	800203c <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d008      	beq.n	8000b44 <main+0xec>
 8000b32:	4b55      	ldr	r3, [pc, #340]	@ (8000c88 <main+0x230>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000b3a:	f000 ffbf 	bl	8001abc <HAL_GetTick>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	429c      	cmp	r4, r3
 8000b42:	d8ee      	bhi.n	8000b22 <main+0xca>
		  Value2 = __HAL_TIM_GET_COUNTER(&htim1);
 8000b44:	4b4d      	ldr	r3, [pc, #308]	@ (8000c7c <main+0x224>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b4a:	4a51      	ldr	r2, [pc, #324]	@ (8000c90 <main+0x238>)
 8000b4c:	6013      	str	r3, [r2, #0]

		  // Calculate the distance (in cm)
		  Distance = (Value2 - Value1) * 0.034 / 2;
 8000b4e:	4b50      	ldr	r3, [pc, #320]	@ (8000c90 <main+0x238>)
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	4b4e      	ldr	r3, [pc, #312]	@ (8000c8c <main+0x234>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fc3b 	bl	80003d4 <__aeabi_ui2d>
 8000b5e:	a344      	add	r3, pc, #272	@ (adr r3, 8000c70 <main+0x218>)
 8000b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b64:	f7ff fcb0 	bl	80004c8 <__aeabi_dmul>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000b78:	f7ff fdd0 	bl	800071c <__aeabi_ddiv>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	460b      	mov	r3, r1
 8000b80:	4610      	mov	r0, r2
 8000b82:	4619      	mov	r1, r3
 8000b84:	f7ff feb2 	bl	80008ec <__aeabi_d2uiz>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	4b41      	ldr	r3, [pc, #260]	@ (8000c94 <main+0x23c>)
 8000b8e:	801a      	strh	r2, [r3, #0]
		  // Display the distance on the OLED
		  if (Distance >150){
 8000b90:	4b40      	ldr	r3, [pc, #256]	@ (8000c94 <main+0x23c>)
 8000b92:	881b      	ldrh	r3, [r3, #0]
 8000b94:	2b96      	cmp	r3, #150	@ 0x96
 8000b96:	d909      	bls.n	8000bac <main+0x154>
			  SSD1306_GotoXY(0, 20);
 8000b98:	2114      	movs	r1, #20
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f000 fbe2 	bl	8001364 <SSD1306_GotoXY>
			  SSD1306_Puts("Vat Can: 0", &Font_11x18, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	493d      	ldr	r1, [pc, #244]	@ (8000c98 <main+0x240>)
 8000ba4:	483d      	ldr	r0, [pc, #244]	@ (8000c9c <main+0x244>)
 8000ba6:	f000 fc71 	bl	800148c <SSD1306_Puts>
 8000baa:	e008      	b.n	8000bbe <main+0x166>
		  }
		  else{
			  SSD1306_GotoXY(0, 20);
 8000bac:	2114      	movs	r1, #20
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 fbd8 	bl	8001364 <SSD1306_GotoXY>
			  SSD1306_Puts("Vat Can: 1", &Font_11x18, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4938      	ldr	r1, [pc, #224]	@ (8000c98 <main+0x240>)
 8000bb8:	4839      	ldr	r0, [pc, #228]	@ (8000ca0 <main+0x248>)
 8000bba:	f000 fc67 	bl	800148c <SSD1306_Puts>
		  }
		  SSD1306_GotoXY(0, 40);
 8000bbe:	2128      	movs	r1, #40	@ 0x28
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fbcf 	bl	8001364 <SSD1306_GotoXY>
		  SSD1306_Puts("Dis: ", &Font_11x18, 1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4933      	ldr	r1, [pc, #204]	@ (8000c98 <main+0x240>)
 8000bca:	4836      	ldr	r0, [pc, #216]	@ (8000ca4 <main+0x24c>)
 8000bcc:	f000 fc5e 	bl	800148c <SSD1306_Puts>
		  sprintf(strCopy, "%d ", Distance);
 8000bd0:	4b30      	ldr	r3, [pc, #192]	@ (8000c94 <main+0x23c>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4934      	ldr	r1, [pc, #208]	@ (8000ca8 <main+0x250>)
 8000bd8:	4834      	ldr	r0, [pc, #208]	@ (8000cac <main+0x254>)
 8000bda:	f003 f8a3 	bl	8003d24 <siprintf>
		  SSD1306_GotoXY(50, 40);
 8000bde:	2128      	movs	r1, #40	@ 0x28
 8000be0:	2032      	movs	r0, #50	@ 0x32
 8000be2:	f000 fbbf 	bl	8001364 <SSD1306_GotoXY>
		  SSD1306_Puts(strCopy, &Font_16x26, 1);
 8000be6:	2201      	movs	r2, #1
 8000be8:	4931      	ldr	r1, [pc, #196]	@ (8000cb0 <main+0x258>)
 8000bea:	4830      	ldr	r0, [pc, #192]	@ (8000cac <main+0x254>)
 8000bec:	f000 fc4e 	bl	800148c <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000bf0:	f000 fb14 	bl	800121c <SSD1306_UpdateScreen>
		  if (Distance < 20){
 8000bf4:	4b27      	ldr	r3, [pc, #156]	@ (8000c94 <main+0x23c>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	2b13      	cmp	r3, #19
 8000bfa:	d814      	bhi.n	8000c26 <main+0x1ce>
			  Move(STOP);
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff fe95 	bl	800092c <Move>
			  HAL_Delay(100);
 8000c02:	2064      	movs	r0, #100	@ 0x64
 8000c04:	f000 ff64 	bl	8001ad0 <HAL_Delay>
			  Move(BACKWARD);
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f7ff fe8f 	bl	800092c <Move>
			  HAL_Delay(1000);
 8000c0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c12:	f000 ff5d 	bl	8001ad0 <HAL_Delay>
			  Move(TURN_LEFT);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f7ff fe88 	bl	800092c <Move>
			  HAL_Delay(2000);
 8000c1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c20:	f000 ff56 	bl	8001ad0 <HAL_Delay>
 8000c24:	e013      	b.n	8000c4e <main+0x1f6>
		  }
		  else{
			  Move(FORWARD);
 8000c26:	2001      	movs	r0, #1
 8000c28:	f7ff fe80 	bl	800092c <Move>
 8000c2c:	e00f      	b.n	8000c4e <main+0x1f6>


//		  HAL_Delay(100); // Delay before the next reading
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, LED_Pin, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2120      	movs	r1, #32
 8000c32:	4811      	ldr	r0, [pc, #68]	@ (8000c78 <main+0x220>)
 8000c34:	f001 fa19 	bl	800206a <HAL_GPIO_WritePin>
		  //OFF
		  SSD1306_Clear();
 8000c38:	f000 fc4d 	bl	80014d6 <SSD1306_Clear>
		  SSD1306_GotoXY(0, 0);
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 fb90 	bl	8001364 <SSD1306_GotoXY>
		  SSD1306_Puts("Hoat Dong: 0", &Font_11x18, 1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	4914      	ldr	r1, [pc, #80]	@ (8000c98 <main+0x240>)
 8000c48:	481a      	ldr	r0, [pc, #104]	@ (8000cb4 <main+0x25c>)
 8000c4a:	f000 fc1f 	bl	800148c <SSD1306_Puts>

	  }
	  if (STATE2){
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <main+0x260>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f43f af26 	beq.w	8000aa4 <main+0x4c>
		  STATE2 = 0;
 8000c58:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <main+0x260>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
		  STATE1 = 1;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <main+0x22c>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	701a      	strb	r2, [r3, #0]
		  SSD1306_Init();
 8000c64:	f000 fa16 	bl	8001094 <SSD1306_Init>
	  if (STATE1){
 8000c68:	e71c      	b.n	8000aa4 <main+0x4c>
 8000c6a:	bf00      	nop
 8000c6c:	f3af 8000 	nop.w
 8000c70:	b020c49c 	.word	0xb020c49c
 8000c74:	3fa16872 	.word	0x3fa16872
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	20000100 	.word	0x20000100
 8000c80:	20000148 	.word	0x20000148
 8000c84:	20000096 	.word	0x20000096
 8000c88:	20000088 	.word	0x20000088
 8000c8c:	2000008c 	.word	0x2000008c
 8000c90:	20000090 	.word	0x20000090
 8000c94:	20000094 	.word	0x20000094
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	0800469c 	.word	0x0800469c
 8000ca0:	080046a8 	.word	0x080046a8
 8000ca4:	080046b4 	.word	0x080046b4
 8000ca8:	080046bc 	.word	0x080046bc
 8000cac:	2000009c 	.word	0x2000009c
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	080046c0 	.word	0x080046c0
 8000cb8:	20000097 	.word	0x20000097

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b090      	sub	sp, #64	@ 0x40
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0318 	add.w	r3, r7, #24
 8000cc6:	2228      	movs	r2, #40	@ 0x28
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f003 f84a 	bl	8003d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce6:	2310      	movs	r3, #16
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 ffd6 	bl	8002ca4 <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cfe:	f000 f9c3 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 fa44 	bl	80031a8 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d26:	f000 f9af 	bl	8001088 <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3740      	adds	r7, #64	@ 0x40
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d38:	4b12      	ldr	r3, [pc, #72]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d3a:	4a13      	ldr	r2, [pc, #76]	@ (8000d88 <MX_I2C1_Init+0x54>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d40:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <MX_I2C1_Init+0x58>)
 8000d42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d58:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d5e:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	@ (8000d84 <MX_I2C1_Init+0x50>)
 8000d72:	f001 f9cd 	bl	8002110 <HAL_I2C_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d7c:	f000 f984 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200000ac 	.word	0x200000ac
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	00061a80 	.word	0x00061a80

08000d90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	463b      	mov	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dac:	4b1e      	ldr	r3, [pc, #120]	@ (8000e28 <MX_TIM1_Init+0x98>)
 8000dae:	4a1f      	ldr	r2, [pc, #124]	@ (8000e2c <MX_TIM1_Init+0x9c>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000db2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e28 <MX_TIM1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <MX_TIM1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_TIM1_Init+0x98>)
 8000dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <MX_TIM1_Init+0x98>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <MX_TIM1_Init+0x98>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_TIM1_Init+0x98>)
 8000dd4:	2280      	movs	r2, #128	@ 0x80
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dd8:	4813      	ldr	r0, [pc, #76]	@ (8000e28 <MX_TIM1_Init+0x98>)
 8000dda:	f002 fb5f 	bl	800349c <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000de4:	f000 f950 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <MX_TIM1_Init+0x98>)
 8000df6:	f002 fd2d 	bl	8003854 <HAL_TIM_ConfigClockSource>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e00:	f000 f942 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e04:	2300      	movs	r3, #0
 8000e06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_TIM1_Init+0x98>)
 8000e12:	f002 ff17 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e1c:	f000 f934 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000100 	.word	0x20000100
 8000e2c:	40012c00 	.word	0x40012c00

08000e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	463b      	mov	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec8 <MX_TIM2_Init+0x98>)
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <MX_TIM2_Init+0x98>)
 8000e56:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000e5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_TIM2_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <MX_TIM2_Init+0x98>)
 8000e64:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e68:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_TIM2_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e70:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <MX_TIM2_Init+0x98>)
 8000e72:	2280      	movs	r2, #128	@ 0x80
 8000e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e76:	4814      	ldr	r0, [pc, #80]	@ (8000ec8 <MX_TIM2_Init+0x98>)
 8000e78:	f002 fb10 	bl	800349c <HAL_TIM_Base_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000e82:	f000 f901 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4619      	mov	r1, r3
 8000e92:	480d      	ldr	r0, [pc, #52]	@ (8000ec8 <MX_TIM2_Init+0x98>)
 8000e94:	f002 fcde 	bl	8003854 <HAL_TIM_ConfigClockSource>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000e9e:	f000 f8f3 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4619      	mov	r1, r3
 8000eae:	4806      	ldr	r0, [pc, #24]	@ (8000ec8 <MX_TIM2_Init+0x98>)
 8000eb0:	f002 fec8 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eba:	f000 f8e5 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000148 	.word	0x20000148

08000ecc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <MX_TIM3_Init+0x94>)
 8000eea:	4a1e      	ldr	r2, [pc, #120]	@ (8000f64 <MX_TIM3_Init+0x98>)
 8000eec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000eee:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <MX_TIM3_Init+0x94>)
 8000ef0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ef4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <MX_TIM3_Init+0x94>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000efc:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <MX_TIM3_Init+0x94>)
 8000efe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <MX_TIM3_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <MX_TIM3_Init+0x94>)
 8000f0c:	2280      	movs	r2, #128	@ 0x80
 8000f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f10:	4813      	ldr	r0, [pc, #76]	@ (8000f60 <MX_TIM3_Init+0x94>)
 8000f12:	f002 fac3 	bl	800349c <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000f1c:	f000 f8b4 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <MX_TIM3_Init+0x94>)
 8000f2e:	f002 fc91 	bl	8003854 <HAL_TIM_ConfigClockSource>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000f38:	f000 f8a6 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <MX_TIM3_Init+0x94>)
 8000f4a:	f002 fe7b 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000f54:	f000 f898 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000190 	.word	0x20000190
 8000f64:	40000400 	.word	0x40000400

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 0308 	add.w	r3, r7, #8
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001074 <MX_GPIO_Init+0x10c>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a3c      	ldr	r2, [pc, #240]	@ (8001074 <MX_GPIO_Init+0x10c>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b3a      	ldr	r3, [pc, #232]	@ (8001074 <MX_GPIO_Init+0x10c>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	4b37      	ldr	r3, [pc, #220]	@ (8001074 <MX_GPIO_Init+0x10c>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a36      	ldr	r2, [pc, #216]	@ (8001074 <MX_GPIO_Init+0x10c>)
 8000f9a:	f043 0308 	orr.w	r3, r3, #8
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <MX_GPIO_Init+0x10c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0308 	and.w	r3, r3, #8
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LED_DIS_Pin|GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 7138 	mov.w	r1, #736	@ 0x2e0
 8000fb2:	4831      	ldr	r0, [pc, #196]	@ (8001078 <MX_GPIO_Init+0x110>)
 8000fb4:	f001 f859 	bl	800206a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000fbe:	482f      	ldr	r0, [pc, #188]	@ (800107c <MX_GPIO_Init+0x114>)
 8000fc0:	f001 f853 	bl	800206a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0_Pin */
  GPIO_InitStruct.Pin = PA0_Pin;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	@ (8001080 <MX_GPIO_Init+0x118>)
 8000fca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PA0_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4828      	ldr	r0, [pc, #160]	@ (8001078 <MX_GPIO_Init+0x110>)
 8000fd8:	f000 feac 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1_Pin */
  GPIO_InitStruct.Pin = PA1_Pin;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fe0:	4b28      	ldr	r3, [pc, #160]	@ (8001084 <MX_GPIO_Init+0x11c>)
 8000fe2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PA1_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	4619      	mov	r1, r3
 8000fee:	4822      	ldr	r0, [pc, #136]	@ (8001078 <MX_GPIO_Init+0x110>)
 8000ff0:	f000 fea0 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_Pin PA4_Pin PA8 */
  GPIO_InitStruct.Pin = PA3_Pin|PA4_Pin|GPIO_PIN_8;
 8000ff4:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8000ff8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0308 	add.w	r3, r7, #8
 8001006:	4619      	mov	r1, r3
 8001008:	481b      	ldr	r0, [pc, #108]	@ (8001078 <MX_GPIO_Init+0x110>)
 800100a:	f000 fe93 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LED_DIS_Pin PA7 PA9 */
  GPIO_InitStruct.Pin = LED_Pin|LED_DIS_Pin|GPIO_PIN_7|GPIO_PIN_9;
 800100e:	f44f 7338 	mov.w	r3, #736	@ 0x2e0
 8001012:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2302      	movs	r3, #2
 800101e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0308 	add.w	r3, r7, #8
 8001024:	4619      	mov	r1, r3
 8001026:	4814      	ldr	r0, [pc, #80]	@ (8001078 <MX_GPIO_Init+0x110>)
 8001028:	f000 fe84 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin;
 800102c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001030:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001032:	2301      	movs	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2302      	movs	r3, #2
 800103c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4619      	mov	r1, r3
 8001044:	480d      	ldr	r0, [pc, #52]	@ (800107c <MX_GPIO_Init+0x114>)
 8001046:	f000 fe75 	bl	8001d34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800104a:	2200      	movs	r2, #0
 800104c:	2100      	movs	r1, #0
 800104e:	2006      	movs	r0, #6
 8001050:	f000 fe39 	bl	8001cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001054:	2006      	movs	r0, #6
 8001056:	f000 fe52 	bl	8001cfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2007      	movs	r0, #7
 8001060:	f000 fe31 	bl	8001cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001064:	2007      	movs	r0, #7
 8001066:	f000 fe4a 	bl	8001cfe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800
 800107c:	40010c00 	.word	0x40010c00
 8001080:	10110000 	.word	0x10110000
 8001084:	10210000 	.word	0x10210000

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <Error_Handler+0x8>

08001094 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800109a:	f000 fa25 	bl	80014e8 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800109e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80010a2:	2201      	movs	r2, #1
 80010a4:	2178      	movs	r1, #120	@ 0x78
 80010a6:	485b      	ldr	r0, [pc, #364]	@ (8001214 <SSD1306_Init+0x180>)
 80010a8:	f001 fa74 	bl	8002594 <HAL_I2C_IsDeviceReady>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e0a9      	b.n	800120a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80010b6:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80010ba:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010bc:	e002      	b.n	80010c4 <SSD1306_Init+0x30>
		p--;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3b01      	subs	r3, #1
 80010c2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1f9      	bne.n	80010be <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010ca:	22ae      	movs	r2, #174	@ 0xae
 80010cc:	2100      	movs	r1, #0
 80010ce:	2078      	movs	r0, #120	@ 0x78
 80010d0:	f000 fa84 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80010d4:	2220      	movs	r2, #32
 80010d6:	2100      	movs	r1, #0
 80010d8:	2078      	movs	r0, #120	@ 0x78
 80010da:	f000 fa7f 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80010de:	2210      	movs	r2, #16
 80010e0:	2100      	movs	r1, #0
 80010e2:	2078      	movs	r0, #120	@ 0x78
 80010e4:	f000 fa7a 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80010e8:	22b0      	movs	r2, #176	@ 0xb0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2078      	movs	r0, #120	@ 0x78
 80010ee:	f000 fa75 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80010f2:	22c8      	movs	r2, #200	@ 0xc8
 80010f4:	2100      	movs	r1, #0
 80010f6:	2078      	movs	r0, #120	@ 0x78
 80010f8:	f000 fa70 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2078      	movs	r0, #120	@ 0x78
 8001102:	f000 fa6b 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001106:	2210      	movs	r2, #16
 8001108:	2100      	movs	r1, #0
 800110a:	2078      	movs	r0, #120	@ 0x78
 800110c:	f000 fa66 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001110:	2240      	movs	r2, #64	@ 0x40
 8001112:	2100      	movs	r1, #0
 8001114:	2078      	movs	r0, #120	@ 0x78
 8001116:	f000 fa61 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800111a:	2281      	movs	r2, #129	@ 0x81
 800111c:	2100      	movs	r1, #0
 800111e:	2078      	movs	r0, #120	@ 0x78
 8001120:	f000 fa5c 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001124:	22ff      	movs	r2, #255	@ 0xff
 8001126:	2100      	movs	r1, #0
 8001128:	2078      	movs	r0, #120	@ 0x78
 800112a:	f000 fa57 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800112e:	22a1      	movs	r2, #161	@ 0xa1
 8001130:	2100      	movs	r1, #0
 8001132:	2078      	movs	r0, #120	@ 0x78
 8001134:	f000 fa52 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001138:	22a6      	movs	r2, #166	@ 0xa6
 800113a:	2100      	movs	r1, #0
 800113c:	2078      	movs	r0, #120	@ 0x78
 800113e:	f000 fa4d 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001142:	22a8      	movs	r2, #168	@ 0xa8
 8001144:	2100      	movs	r1, #0
 8001146:	2078      	movs	r0, #120	@ 0x78
 8001148:	f000 fa48 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800114c:	223f      	movs	r2, #63	@ 0x3f
 800114e:	2100      	movs	r1, #0
 8001150:	2078      	movs	r0, #120	@ 0x78
 8001152:	f000 fa43 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001156:	22a4      	movs	r2, #164	@ 0xa4
 8001158:	2100      	movs	r1, #0
 800115a:	2078      	movs	r0, #120	@ 0x78
 800115c:	f000 fa3e 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001160:	22d3      	movs	r2, #211	@ 0xd3
 8001162:	2100      	movs	r1, #0
 8001164:	2078      	movs	r0, #120	@ 0x78
 8001166:	f000 fa39 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2078      	movs	r0, #120	@ 0x78
 8001170:	f000 fa34 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001174:	22d5      	movs	r2, #213	@ 0xd5
 8001176:	2100      	movs	r1, #0
 8001178:	2078      	movs	r0, #120	@ 0x78
 800117a:	f000 fa2f 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800117e:	22f0      	movs	r2, #240	@ 0xf0
 8001180:	2100      	movs	r1, #0
 8001182:	2078      	movs	r0, #120	@ 0x78
 8001184:	f000 fa2a 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001188:	22d9      	movs	r2, #217	@ 0xd9
 800118a:	2100      	movs	r1, #0
 800118c:	2078      	movs	r0, #120	@ 0x78
 800118e:	f000 fa25 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001192:	2222      	movs	r2, #34	@ 0x22
 8001194:	2100      	movs	r1, #0
 8001196:	2078      	movs	r0, #120	@ 0x78
 8001198:	f000 fa20 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800119c:	22da      	movs	r2, #218	@ 0xda
 800119e:	2100      	movs	r1, #0
 80011a0:	2078      	movs	r0, #120	@ 0x78
 80011a2:	f000 fa1b 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80011a6:	2212      	movs	r2, #18
 80011a8:	2100      	movs	r1, #0
 80011aa:	2078      	movs	r0, #120	@ 0x78
 80011ac:	f000 fa16 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80011b0:	22db      	movs	r2, #219	@ 0xdb
 80011b2:	2100      	movs	r1, #0
 80011b4:	2078      	movs	r0, #120	@ 0x78
 80011b6:	f000 fa11 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80011ba:	2220      	movs	r2, #32
 80011bc:	2100      	movs	r1, #0
 80011be:	2078      	movs	r0, #120	@ 0x78
 80011c0:	f000 fa0c 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011c4:	228d      	movs	r2, #141	@ 0x8d
 80011c6:	2100      	movs	r1, #0
 80011c8:	2078      	movs	r0, #120	@ 0x78
 80011ca:	f000 fa07 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011ce:	2214      	movs	r2, #20
 80011d0:	2100      	movs	r1, #0
 80011d2:	2078      	movs	r0, #120	@ 0x78
 80011d4:	f000 fa02 	bl	80015dc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80011d8:	22af      	movs	r2, #175	@ 0xaf
 80011da:	2100      	movs	r1, #0
 80011dc:	2078      	movs	r0, #120	@ 0x78
 80011de:	f000 f9fd 	bl	80015dc <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80011e2:	222e      	movs	r2, #46	@ 0x2e
 80011e4:	2100      	movs	r1, #0
 80011e6:	2078      	movs	r0, #120	@ 0x78
 80011e8:	f000 f9f8 	bl	80015dc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80011ec:	2000      	movs	r0, #0
 80011ee:	f000 f843 	bl	8001278 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80011f2:	f000 f813 	bl	800121c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <SSD1306_Init+0x184>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <SSD1306_Init+0x184>)
 80011fe:	2200      	movs	r2, #0
 8001200:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <SSD1306_Init+0x184>)
 8001204:	2201      	movs	r2, #1
 8001206:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200000ac 	.word	0x200000ac
 8001218:	200005d8 	.word	0x200005d8

0800121c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001222:	2300      	movs	r3, #0
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	e01d      	b.n	8001264 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	3b50      	subs	r3, #80	@ 0x50
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	2100      	movs	r1, #0
 8001232:	2078      	movs	r0, #120	@ 0x78
 8001234:	f000 f9d2 	bl	80015dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2078      	movs	r0, #120	@ 0x78
 800123e:	f000 f9cd 	bl	80015dc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001242:	2210      	movs	r2, #16
 8001244:	2100      	movs	r1, #0
 8001246:	2078      	movs	r0, #120	@ 0x78
 8001248:	f000 f9c8 	bl	80015dc <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	01db      	lsls	r3, r3, #7
 8001250:	4a08      	ldr	r2, [pc, #32]	@ (8001274 <SSD1306_UpdateScreen+0x58>)
 8001252:	441a      	add	r2, r3
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	2140      	movs	r1, #64	@ 0x40
 8001258:	2078      	movs	r0, #120	@ 0x78
 800125a:	f000 f959 	bl	8001510 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	3301      	adds	r3, #1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b07      	cmp	r3, #7
 8001268:	d9de      	bls.n	8001228 <SSD1306_UpdateScreen+0xc>
	}
}
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200001d8 	.word	0x200001d8

08001278 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <SSD1306_Fill+0x14>
 8001288:	2300      	movs	r3, #0
 800128a:	e000      	b.n	800128e <SSD1306_Fill+0x16>
 800128c:	23ff      	movs	r3, #255	@ 0xff
 800128e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001292:	4619      	mov	r1, r3
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <SSD1306_Fill+0x2c>)
 8001296:	f002 fd65 	bl	8003d64 <memset>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200001d8 	.word	0x200001d8

080012a8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	70fb      	strb	r3, [r7, #3]
	if (
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80012be:	d848      	bhi.n	8001352 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012c0:	88bb      	ldrh	r3, [r7, #4]
 80012c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80012c4:	d845      	bhi.n	8001352 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012c6:	4b25      	ldr	r3, [pc, #148]	@ (800135c <SSD1306_DrawPixel+0xb4>)
 80012c8:	791b      	ldrb	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d11a      	bne.n	8001318 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012e2:	88fa      	ldrh	r2, [r7, #6]
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	08db      	lsrs	r3, r3, #3
 80012e8:	b298      	uxth	r0, r3
 80012ea:	4603      	mov	r3, r0
 80012ec:	01db      	lsls	r3, r3, #7
 80012ee:	4413      	add	r3, r2
 80012f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001360 <SSD1306_DrawPixel+0xb8>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	b25a      	sxtb	r2, r3
 80012f6:	88bb      	ldrh	r3, [r7, #4]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	b25b      	sxtb	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b259      	sxtb	r1, r3
 8001308:	88fa      	ldrh	r2, [r7, #6]
 800130a:	4603      	mov	r3, r0
 800130c:	01db      	lsls	r3, r3, #7
 800130e:	4413      	add	r3, r2
 8001310:	b2c9      	uxtb	r1, r1
 8001312:	4a13      	ldr	r2, [pc, #76]	@ (8001360 <SSD1306_DrawPixel+0xb8>)
 8001314:	54d1      	strb	r1, [r2, r3]
 8001316:	e01d      	b.n	8001354 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001318:	88fa      	ldrh	r2, [r7, #6]
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	b298      	uxth	r0, r3
 8001320:	4603      	mov	r3, r0
 8001322:	01db      	lsls	r3, r3, #7
 8001324:	4413      	add	r3, r2
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <SSD1306_DrawPixel+0xb8>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	b25a      	sxtb	r2, r3
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	2101      	movs	r1, #1
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	b25b      	sxtb	r3, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	b25b      	sxtb	r3, r3
 800133e:	4013      	ands	r3, r2
 8001340:	b259      	sxtb	r1, r3
 8001342:	88fa      	ldrh	r2, [r7, #6]
 8001344:	4603      	mov	r3, r0
 8001346:	01db      	lsls	r3, r3, #7
 8001348:	4413      	add	r3, r2
 800134a:	b2c9      	uxtb	r1, r1
 800134c:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <SSD1306_DrawPixel+0xb8>)
 800134e:	54d1      	strb	r1, [r2, r3]
 8001350:	e000      	b.n	8001354 <SSD1306_DrawPixel+0xac>
		return;
 8001352:	bf00      	nop
	}
}
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	200005d8 	.word	0x200005d8
 8001360:	200001d8 	.word	0x200001d8

08001364 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	80fb      	strh	r3, [r7, #6]
 8001370:	4613      	mov	r3, r2
 8001372:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001374:	4a05      	ldr	r2, [pc, #20]	@ (800138c <SSD1306_GotoXY+0x28>)
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800137a:	4a04      	ldr	r2, [pc, #16]	@ (800138c <SSD1306_GotoXY+0x28>)
 800137c:	88bb      	ldrh	r3, [r7, #4]
 800137e:	8053      	strh	r3, [r2, #2]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200005d8 	.word	0x200005d8

08001390 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]
 800139c:	4613      	mov	r3, r2
 800139e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013a0:	4b39      	ldr	r3, [pc, #228]	@ (8001488 <SSD1306_Putc+0xf8>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4413      	add	r3, r2
	if (
 80013ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80013ae:	dc07      	bgt.n	80013c0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013b0:	4b35      	ldr	r3, [pc, #212]	@ (8001488 <SSD1306_Putc+0xf8>)
 80013b2:	885b      	ldrh	r3, [r3, #2]
 80013b4:	461a      	mov	r2, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80013be:	dd01      	ble.n	80013c4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	e05d      	b.n	8001480 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	e04b      	b.n	8001462 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	3b20      	subs	r3, #32
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	7849      	ldrb	r1, [r1, #1]
 80013d6:	fb01 f303 	mul.w	r3, r1, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	440b      	add	r3, r1
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	e030      	b.n	8001450 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d010      	beq.n	8001420 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80013fe:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <SSD1306_Putc+0xf8>)
 8001400:	881a      	ldrh	r2, [r3, #0]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	b29b      	uxth	r3, r3
 8001406:	4413      	add	r3, r2
 8001408:	b298      	uxth	r0, r3
 800140a:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <SSD1306_Putc+0xf8>)
 800140c:	885a      	ldrh	r2, [r3, #2]
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4413      	add	r3, r2
 8001414:	b29b      	uxth	r3, r3
 8001416:	79ba      	ldrb	r2, [r7, #6]
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff ff45 	bl	80012a8 <SSD1306_DrawPixel>
 800141e:	e014      	b.n	800144a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001420:	4b19      	ldr	r3, [pc, #100]	@ (8001488 <SSD1306_Putc+0xf8>)
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	b29b      	uxth	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b298      	uxth	r0, r3
 800142c:	4b16      	ldr	r3, [pc, #88]	@ (8001488 <SSD1306_Putc+0xf8>)
 800142e:	885a      	ldrh	r2, [r3, #2]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	b29b      	uxth	r3, r3
 8001434:	4413      	add	r3, r2
 8001436:	b299      	uxth	r1, r3
 8001438:	79bb      	ldrb	r3, [r7, #6]
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf0c      	ite	eq
 800143e:	2301      	moveq	r3, #1
 8001440:	2300      	movne	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	f7ff ff2f 	bl	80012a8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	3301      	adds	r3, #1
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4293      	cmp	r3, r2
 800145a:	d3c8      	bcc.n	80013ee <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	3301      	adds	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	461a      	mov	r2, r3
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	4293      	cmp	r3, r2
 800146c:	d3ad      	bcc.n	80013ca <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <SSD1306_Putc+0xf8>)
 8001470:	881b      	ldrh	r3, [r3, #0]
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	4413      	add	r3, r2
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b03      	ldr	r3, [pc, #12]	@ (8001488 <SSD1306_Putc+0xf8>)
 800147c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800147e:	79fb      	ldrb	r3, [r7, #7]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200005d8 	.word	0x200005d8

0800148c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	4613      	mov	r3, r2
 8001498:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800149a:	e012      	b.n	80014c2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	79fa      	ldrb	r2, [r7, #7]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff73 	bl	8001390 <SSD1306_Putc>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d002      	beq.n	80014bc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	e008      	b.n	80014ce <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	3301      	adds	r3, #1
 80014c0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1e8      	bne.n	800149c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	781b      	ldrb	r3, [r3, #0]
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80014da:	2000      	movs	r0, #0
 80014dc:	f7ff fecc 	bl	8001278 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80014e0:	f7ff fe9c 	bl	800121c <SSD1306_UpdateScreen>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <ssd1306_I2C_Init+0x24>)
 80014f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014f2:	e002      	b.n	80014fa <ssd1306_I2C_Init+0x12>
		p--;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f9      	bne.n	80014f4 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr
 800150c:	0003d090 	.word	0x0003d090

08001510 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b0c7      	sub	sp, #284	@ 0x11c
 8001514:	af02      	add	r7, sp, #8
 8001516:	4604      	mov	r4, r0
 8001518:	4608      	mov	r0, r1
 800151a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800151e:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001522:	600a      	str	r2, [r1, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800152a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800152e:	4622      	mov	r2, r4
 8001530:	701a      	strb	r2, [r3, #0]
 8001532:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001536:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800153a:	4602      	mov	r2, r0
 800153c:	701a      	strb	r2, [r3, #0]
 800153e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001542:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001546:	460a      	mov	r2, r1
 8001548:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800154a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800154e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001552:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001556:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800155a:	7812      	ldrb	r2, [r2, #0]
 800155c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800155e:	2300      	movs	r3, #0
 8001560:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001564:	e015      	b.n	8001592 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001566:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800156a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800156e:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	441a      	add	r2, r3
 8001576:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800157a:	3301      	adds	r3, #1
 800157c:	7811      	ldrb	r1, [r2, #0]
 800157e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001582:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001586:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001588:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800158c:	3301      	adds	r3, #1
 800158e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001592:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001596:	b29b      	uxth	r3, r3
 8001598:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800159c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80015a0:	8812      	ldrh	r2, [r2, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d8df      	bhi.n	8001566 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80015a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015aa:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b299      	uxth	r1, r3
 80015b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015b6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	f107 020c 	add.w	r2, r7, #12
 80015c4:	200a      	movs	r0, #10
 80015c6:	9000      	str	r0, [sp, #0]
 80015c8:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <ssd1306_I2C_WriteMulti+0xc8>)
 80015ca:	f000 fee5 	bl	8002398 <HAL_I2C_Master_Transmit>
}
 80015ce:	bf00      	nop
 80015d0:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	200000ac 	.word	0x200000ac

080015dc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af02      	add	r7, sp, #8
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
 80015e6:	460b      	mov	r3, r1
 80015e8:	71bb      	strb	r3, [r7, #6]
 80015ea:	4613      	mov	r3, r2
 80015ec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80015ee:	79bb      	ldrb	r3, [r7, #6]
 80015f0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80015f2:	797b      	ldrb	r3, [r7, #5]
 80015f4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	b299      	uxth	r1, r3
 80015fa:	f107 020c 	add.w	r2, r7, #12
 80015fe:	230a      	movs	r3, #10
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2302      	movs	r3, #2
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <ssd1306_I2C_Write+0x38>)
 8001606:	f000 fec7 	bl	8002398 <HAL_I2C_Master_Transmit>
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200000ac 	.word	0x200000ac

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_MspInit+0x5c>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	4a14      	ldr	r2, [pc, #80]	@ (8001674 <HAL_MspInit+0x5c>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6193      	str	r3, [r2, #24]
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_MspInit+0x5c>)
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <HAL_MspInit+0x5c>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a0e      	ldr	r2, [pc, #56]	@ (8001674 <HAL_MspInit+0x5c>)
 800163c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <HAL_MspInit+0x5c>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800164e:	4b0a      	ldr	r3, [pc, #40]	@ (8001678 <HAL_MspInit+0x60>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_MspInit+0x60>)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	40021000 	.word	0x40021000
 8001678:	40010000 	.word	0x40010000

0800167c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a15      	ldr	r2, [pc, #84]	@ (80016ec <HAL_I2C_MspInit+0x70>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d123      	bne.n	80016e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_I2C_MspInit+0x74>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a13      	ldr	r2, [pc, #76]	@ (80016f0 <HAL_I2C_MspInit+0x74>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b11      	ldr	r3, [pc, #68]	@ (80016f0 <HAL_I2C_MspInit+0x74>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b4:	23c0      	movs	r3, #192	@ 0xc0
 80016b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b8:	2312      	movs	r3, #18
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016bc:	2303      	movs	r3, #3
 80016be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4619      	mov	r1, r3
 80016c6:	480b      	ldr	r0, [pc, #44]	@ (80016f4 <HAL_I2C_MspInit+0x78>)
 80016c8:	f000 fb34 	bl	8001d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_I2C_MspInit+0x74>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <HAL_I2C_MspInit+0x74>)
 80016d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016d6:	61d3      	str	r3, [r2, #28]
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_I2C_MspInit+0x74>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80016e4:	bf00      	nop
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40005400 	.word	0x40005400
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40010c00 	.word	0x40010c00

080016f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a23      	ldr	r2, [pc, #140]	@ (8001794 <HAL_TIM_Base_MspInit+0x9c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10c      	bne.n	8001724 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800170a:	4b23      	ldr	r3, [pc, #140]	@ (8001798 <HAL_TIM_Base_MspInit+0xa0>)
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	4a22      	ldr	r2, [pc, #136]	@ (8001798 <HAL_TIM_Base_MspInit+0xa0>)
 8001710:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001714:	6193      	str	r3, [r2, #24]
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_TIM_Base_MspInit+0xa0>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001722:	e032      	b.n	800178a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800172c:	d114      	bne.n	8001758 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172e:	4b1a      	ldr	r3, [pc, #104]	@ (8001798 <HAL_TIM_Base_MspInit+0xa0>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a19      	ldr	r2, [pc, #100]	@ (8001798 <HAL_TIM_Base_MspInit+0xa0>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b17      	ldr	r3, [pc, #92]	@ (8001798 <HAL_TIM_Base_MspInit+0xa0>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2100      	movs	r1, #0
 800174a:	201c      	movs	r0, #28
 800174c:	f000 fabb 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001750:	201c      	movs	r0, #28
 8001752:	f000 fad4 	bl	8001cfe <HAL_NVIC_EnableIRQ>
}
 8001756:	e018      	b.n	800178a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <HAL_TIM_Base_MspInit+0xa4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d113      	bne.n	800178a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <HAL_TIM_Base_MspInit+0xa0>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <HAL_TIM_Base_MspInit+0xa0>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <HAL_TIM_Base_MspInit+0xa0>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	201d      	movs	r0, #29
 8001780:	f000 faa1 	bl	8001cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001784:	201d      	movs	r0, #29
 8001786:	f000 faba 	bl	8001cfe <HAL_NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40012c00 	.word	0x40012c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40000400 	.word	0x40000400

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <NMI_Handler+0x4>

080017a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <MemManage_Handler+0x4>

080017b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f0:	f000 f952 	bl	8001a98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80017fc:	2140      	movs	r1, #64	@ 0x40
 80017fe:	480b      	ldr	r0, [pc, #44]	@ (800182c <EXTI0_IRQHandler+0x34>)
 8001800:	f000 fc4b 	bl	800209a <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PA0_Pin);
 8001804:	2001      	movs	r0, #1
 8001806:	f000 fc61 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  STATE2 = !STATE2;
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <EXTI0_IRQHandler+0x38>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f083 0301 	eor.w	r3, r3, #1
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	b2da      	uxtb	r2, r3
 8001824:	4b02      	ldr	r3, [pc, #8]	@ (8001830 <EXTI0_IRQHandler+0x38>)
 8001826:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40010800 	.word	0x40010800
 8001830:	20000097 	.word	0x20000097

08001834 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001838:	2180      	movs	r1, #128	@ 0x80
 800183a:	480b      	ldr	r0, [pc, #44]	@ (8001868 <EXTI1_IRQHandler+0x34>)
 800183c:	f000 fc2d 	bl	800209a <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PA1_Pin);
 8001840:	2002      	movs	r0, #2
 8001842:	f000 fc43 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  STATE1 = !STATE1;
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <EXTI1_IRQHandler+0x38>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	bf14      	ite	ne
 800184e:	2301      	movne	r3, #1
 8001850:	2300      	moveq	r3, #0
 8001852:	b2db      	uxtb	r3, r3
 8001854:	f083 0301 	eor.w	r3, r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	b2da      	uxtb	r2, r3
 8001860:	4b02      	ldr	r3, [pc, #8]	@ (800186c <EXTI1_IRQHandler+0x38>)
 8001862:	701a      	strb	r2, [r3, #0]


  /* USER CODE END EXTI1_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40010800 	.word	0x40010800
 800186c:	20000096 	.word	0x20000096

08001870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (STATE1){
 8001874:	4b0d      	ldr	r3, [pc, #52]	@ (80018ac <TIM2_IRQHandler+0x3c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <TIM2_IRQHandler+0x14>
		HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 800187c:	2120      	movs	r1, #32
 800187e:	480c      	ldr	r0, [pc, #48]	@ (80018b0 <TIM2_IRQHandler+0x40>)
 8001880:	f000 fc0b 	bl	800209a <HAL_GPIO_TogglePin>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001884:	480b      	ldr	r0, [pc, #44]	@ (80018b4 <TIM2_IRQHandler+0x44>)
 8001886:	f001 fef5 	bl	8003674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  LED1_STATE = !LED1_STATE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <TIM2_IRQHandler+0x48>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	bf14      	ite	ne
 8001892:	2301      	movne	r3, #1
 8001894:	2300      	moveq	r3, #0
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f083 0301 	eor.w	r3, r3, #1
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <TIM2_IRQHandler+0x48>)
 80018a6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000096 	.word	0x20000096
 80018b0:	40010800 	.word	0x40010800
 80018b4:	20000148 	.word	0x20000148
 80018b8:	20000098 	.word	0x20000098

080018bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	count++;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001934 <TIM3_IRQHandler+0x78>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <TIM3_IRQHandler+0x78>)
 80018ca:	701a      	strb	r2, [r3, #0]
	if(STATE1){
 80018cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <TIM3_IRQHandler+0x7c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d02a      	beq.n	800192a <TIM3_IRQHandler+0x6e>
		if (Distance<30 && count%2==0){
 80018d4:	4b19      	ldr	r3, [pc, #100]	@ (800193c <TIM3_IRQHandler+0x80>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	2b1d      	cmp	r3, #29
 80018da:	d80b      	bhi.n	80018f4 <TIM3_IRQHandler+0x38>
 80018dc:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <TIM3_IRQHandler+0x78>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d104      	bne.n	80018f4 <TIM3_IRQHandler+0x38>
			HAL_GPIO_TogglePin(GPIOA, LED_DIS_Pin);
 80018ea:	2140      	movs	r1, #64	@ 0x40
 80018ec:	4814      	ldr	r0, [pc, #80]	@ (8001940 <TIM3_IRQHandler+0x84>)
 80018ee:	f000 fbd4 	bl	800209a <HAL_GPIO_TogglePin>
 80018f2:	e01a      	b.n	800192a <TIM3_IRQHandler+0x6e>
		}
		else if (Distance>80 && count%8==0){
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <TIM3_IRQHandler+0x80>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	2b50      	cmp	r3, #80	@ 0x50
 80018fa:	d90b      	bls.n	8001914 <TIM3_IRQHandler+0x58>
 80018fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <TIM3_IRQHandler+0x78>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	d104      	bne.n	8001914 <TIM3_IRQHandler+0x58>
			HAL_GPIO_TogglePin(GPIOA, LED_DIS_Pin);
 800190a:	2140      	movs	r1, #64	@ 0x40
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <TIM3_IRQHandler+0x84>)
 800190e:	f000 fbc4 	bl	800209a <HAL_GPIO_TogglePin>
 8001912:	e00a      	b.n	800192a <TIM3_IRQHandler+0x6e>
		}
		else if (count%4==0){
 8001914:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <TIM3_IRQHandler+0x78>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d103      	bne.n	800192a <TIM3_IRQHandler+0x6e>
			HAL_GPIO_TogglePin(GPIOA, LED_DIS_Pin);
 8001922:	2140      	movs	r1, #64	@ 0x40
 8001924:	4806      	ldr	r0, [pc, #24]	@ (8001940 <TIM3_IRQHandler+0x84>)
 8001926:	f000 fbb8 	bl	800209a <HAL_GPIO_TogglePin>
		}
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800192a:	4806      	ldr	r0, [pc, #24]	@ (8001944 <TIM3_IRQHandler+0x88>)
 800192c:	f001 fea2 	bl	8003674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000099 	.word	0x20000099
 8001938:	20000096 	.word	0x20000096
 800193c:	20000094 	.word	0x20000094
 8001940:	40010800 	.word	0x40010800
 8001944:	20000190 	.word	0x20000190

08001948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001950:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <_sbrk+0x5c>)
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <_sbrk+0x60>)
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800195c:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <_sbrk+0x64>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001964:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <_sbrk+0x64>)
 8001966:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <_sbrk+0x68>)
 8001968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800196a:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	429a      	cmp	r2, r3
 8001976:	d207      	bcs.n	8001988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001978:	f002 f9fc 	bl	8003d74 <__errno>
 800197c:	4603      	mov	r3, r0
 800197e:	220c      	movs	r2, #12
 8001980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	e009      	b.n	800199c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198e:	4b07      	ldr	r3, [pc, #28]	@ (80019ac <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a05      	ldr	r2, [pc, #20]	@ (80019ac <_sbrk+0x64>)
 8001998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800199a:	68fb      	ldr	r3, [r7, #12]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20005000 	.word	0x20005000
 80019a8:	00000400 	.word	0x00000400
 80019ac:	200005e0 	.word	0x200005e0
 80019b0:	20000730 	.word	0x20000730

080019b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019c0:	f7ff fff8 	bl	80019b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019c4:	480b      	ldr	r0, [pc, #44]	@ (80019f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019c6:	490c      	ldr	r1, [pc, #48]	@ (80019f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019c8:	4a0c      	ldr	r2, [pc, #48]	@ (80019fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019cc:	e002      	b.n	80019d4 <LoopCopyDataInit>

080019ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d2:	3304      	adds	r3, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019d8:	d3f9      	bcc.n	80019ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019da:	4a09      	ldr	r2, [pc, #36]	@ (8001a00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019dc:	4c09      	ldr	r4, [pc, #36]	@ (8001a04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e0:	e001      	b.n	80019e6 <LoopFillZerobss>

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e4:	3204      	adds	r2, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019ea:	f002 f9c9 	bl	8003d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019ee:	f7ff f833 	bl	8000a58 <main>
  bx lr
 80019f2:	4770      	bx	lr
  ldr r0, =_sdata
 80019f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80019fc:	080067e0 	.word	0x080067e0
  ldr r2, =_sbss
 8001a00:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a04:	20000730 	.word	0x20000730

08001a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a08:	e7fe      	b.n	8001a08 <ADC1_2_IRQHandler>
	...

08001a0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a10:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <HAL_Init+0x28>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <HAL_Init+0x28>)
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a1c:	2003      	movs	r0, #3
 8001a1e:	f000 f947 	bl	8001cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a22:	200f      	movs	r0, #15
 8001a24:	f000 f808 	bl	8001a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a28:	f7ff fdf6 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a40:	4b12      	ldr	r3, [pc, #72]	@ (8001a8c <HAL_InitTick+0x54>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_InitTick+0x58>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 f95f 	bl	8001d1a <HAL_SYSTICK_Config>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00e      	b.n	8001a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b0f      	cmp	r3, #15
 8001a6a:	d80a      	bhi.n	8001a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f000 f927 	bl	8001cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a78:	4a06      	ldr	r2, [pc, #24]	@ (8001a94 <HAL_InitTick+0x5c>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000010 	.word	0x20000010
 8001a90:	20000018 	.word	0x20000018
 8001a94:	20000014 	.word	0x20000014

08001a98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a9c:	4b05      	ldr	r3, [pc, #20]	@ (8001ab4 <HAL_IncTick+0x1c>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_IncTick+0x20>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a03      	ldr	r2, [pc, #12]	@ (8001ab8 <HAL_IncTick+0x20>)
 8001aaa:	6013      	str	r3, [r2, #0]
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000018 	.word	0x20000018
 8001ab8:	200005e4 	.word	0x200005e4

08001abc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b02      	ldr	r3, [pc, #8]	@ (8001acc <HAL_GetTick+0x10>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	200005e4 	.word	0x200005e4

08001ad0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ad8:	f7ff fff0 	bl	8001abc <HAL_GetTick>
 8001adc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d005      	beq.n	8001af6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aea:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <HAL_Delay+0x44>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001af6:	bf00      	nop
 8001af8:	f7ff ffe0 	bl	8001abc <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d8f7      	bhi.n	8001af8 <HAL_Delay+0x28>
  {
  }
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000018 	.word	0x20000018

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	@ (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4906      	ldr	r1, [pc, #24]	@ (8001bb0 <__NVIC_EnableIRQ+0x34>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100

08001bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	6039      	str	r1, [r7, #0]
 8001bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	db0a      	blt.n	8001bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	490c      	ldr	r1, [pc, #48]	@ (8001c00 <__NVIC_SetPriority+0x4c>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	0112      	lsls	r2, r2, #4
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bdc:	e00a      	b.n	8001bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4908      	ldr	r1, [pc, #32]	@ (8001c04 <__NVIC_SetPriority+0x50>)
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	3b04      	subs	r3, #4
 8001bec:	0112      	lsls	r2, r2, #4
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	440b      	add	r3, r1
 8001bf2:	761a      	strb	r2, [r3, #24]
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000e100 	.word	0xe000e100
 8001c04:	e000ed00 	.word	0xe000ed00

08001c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b089      	sub	sp, #36	@ 0x24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f1c3 0307 	rsb	r3, r3, #7
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	bf28      	it	cs
 8001c26:	2304      	movcs	r3, #4
 8001c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d902      	bls.n	8001c38 <NVIC_EncodePriority+0x30>
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3b03      	subs	r3, #3
 8001c36:	e000      	b.n	8001c3a <NVIC_EncodePriority+0x32>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43da      	mvns	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	401a      	ands	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c50:	f04f 31ff 	mov.w	r1, #4294967295
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5a:	43d9      	mvns	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c60:	4313      	orrs	r3, r2
         );
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3724      	adds	r7, #36	@ 0x24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b01      	subs	r3, #1
 8001c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c7c:	d301      	bcc.n	8001c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00f      	b.n	8001ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c82:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <SysTick_Config+0x40>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c90:	f7ff ff90 	bl	8001bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <SysTick_Config+0x40>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c9a:	4b04      	ldr	r3, [pc, #16]	@ (8001cac <SysTick_Config+0x40>)
 8001c9c:	2207      	movs	r2, #7
 8001c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	e000e010 	.word	0xe000e010

08001cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff ff2d 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	4603      	mov	r3, r0
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
 8001cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd8:	f7ff ff42 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68b9      	ldr	r1, [r7, #8]
 8001ce2:	6978      	ldr	r0, [r7, #20]
 8001ce4:	f7ff ff90 	bl	8001c08 <NVIC_EncodePriority>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cee:	4611      	mov	r1, r2
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5f 	bl	8001bb4 <__NVIC_SetPriority>
}
 8001cf6:	bf00      	nop
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ff35 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff ffa2 	bl	8001c6c <SysTick_Config>
 8001d28:	4603      	mov	r3, r0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b08b      	sub	sp, #44	@ 0x2c
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d42:	2300      	movs	r3, #0
 8001d44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	e169      	b.n	800201c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 8158 	bne.w	8002016 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4a9a      	ldr	r2, [pc, #616]	@ (8001fd4 <HAL_GPIO_Init+0x2a0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d05e      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d70:	4a98      	ldr	r2, [pc, #608]	@ (8001fd4 <HAL_GPIO_Init+0x2a0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d875      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d76:	4a98      	ldr	r2, [pc, #608]	@ (8001fd8 <HAL_GPIO_Init+0x2a4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d058      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d7c:	4a96      	ldr	r2, [pc, #600]	@ (8001fd8 <HAL_GPIO_Init+0x2a4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d86f      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d82:	4a96      	ldr	r2, [pc, #600]	@ (8001fdc <HAL_GPIO_Init+0x2a8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d052      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d88:	4a94      	ldr	r2, [pc, #592]	@ (8001fdc <HAL_GPIO_Init+0x2a8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d869      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d8e:	4a94      	ldr	r2, [pc, #592]	@ (8001fe0 <HAL_GPIO_Init+0x2ac>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d04c      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001d94:	4a92      	ldr	r2, [pc, #584]	@ (8001fe0 <HAL_GPIO_Init+0x2ac>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d863      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001d9a:	4a92      	ldr	r2, [pc, #584]	@ (8001fe4 <HAL_GPIO_Init+0x2b0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d046      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
 8001da0:	4a90      	ldr	r2, [pc, #576]	@ (8001fe4 <HAL_GPIO_Init+0x2b0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d85d      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001da6:	2b12      	cmp	r3, #18
 8001da8:	d82a      	bhi.n	8001e00 <HAL_GPIO_Init+0xcc>
 8001daa:	2b12      	cmp	r3, #18
 8001dac:	d859      	bhi.n	8001e62 <HAL_GPIO_Init+0x12e>
 8001dae:	a201      	add	r2, pc, #4	@ (adr r2, 8001db4 <HAL_GPIO_Init+0x80>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001e2f 	.word	0x08001e2f
 8001db8:	08001e09 	.word	0x08001e09
 8001dbc:	08001e1b 	.word	0x08001e1b
 8001dc0:	08001e5d 	.word	0x08001e5d
 8001dc4:	08001e63 	.word	0x08001e63
 8001dc8:	08001e63 	.word	0x08001e63
 8001dcc:	08001e63 	.word	0x08001e63
 8001dd0:	08001e63 	.word	0x08001e63
 8001dd4:	08001e63 	.word	0x08001e63
 8001dd8:	08001e63 	.word	0x08001e63
 8001ddc:	08001e63 	.word	0x08001e63
 8001de0:	08001e63 	.word	0x08001e63
 8001de4:	08001e63 	.word	0x08001e63
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e63 	.word	0x08001e63
 8001df0:	08001e63 	.word	0x08001e63
 8001df4:	08001e63 	.word	0x08001e63
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e25 	.word	0x08001e25
 8001e00:	4a79      	ldr	r2, [pc, #484]	@ (8001fe8 <HAL_GPIO_Init+0x2b4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e06:	e02c      	b.n	8001e62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e029      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	3304      	adds	r3, #4
 8001e16:	623b      	str	r3, [r7, #32]
          break;
 8001e18:	e024      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	3308      	adds	r3, #8
 8001e20:	623b      	str	r3, [r7, #32]
          break;
 8001e22:	e01f      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	330c      	adds	r3, #12
 8001e2a:	623b      	str	r3, [r7, #32]
          break;
 8001e2c:	e01a      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e36:	2304      	movs	r3, #4
 8001e38:	623b      	str	r3, [r7, #32]
          break;
 8001e3a:	e013      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e44:	2308      	movs	r3, #8
 8001e46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	611a      	str	r2, [r3, #16]
          break;
 8001e4e:	e009      	b.n	8001e64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e50:	2308      	movs	r3, #8
 8001e52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69fa      	ldr	r2, [r7, #28]
 8001e58:	615a      	str	r2, [r3, #20]
          break;
 8001e5a:	e003      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e000      	b.n	8001e64 <HAL_GPIO_Init+0x130>
          break;
 8001e62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	@ 0xff
 8001e68:	d801      	bhi.n	8001e6e <HAL_GPIO_Init+0x13a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	e001      	b.n	8001e72 <HAL_GPIO_Init+0x13e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3304      	adds	r3, #4
 8001e72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	@ 0xff
 8001e78:	d802      	bhi.n	8001e80 <HAL_GPIO_Init+0x14c>
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	e002      	b.n	8001e86 <HAL_GPIO_Init+0x152>
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	3b08      	subs	r3, #8
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	210f      	movs	r1, #15
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	401a      	ands	r2, r3
 8001e98:	6a39      	ldr	r1, [r7, #32]
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 80b1 	beq.w	8002016 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb4:	4b4d      	ldr	r3, [pc, #308]	@ (8001fec <HAL_GPIO_Init+0x2b8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a4c      	ldr	r2, [pc, #304]	@ (8001fec <HAL_GPIO_Init+0x2b8>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b4a      	ldr	r3, [pc, #296]	@ (8001fec <HAL_GPIO_Init+0x2b8>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ecc:	4a48      	ldr	r2, [pc, #288]	@ (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	220f      	movs	r2, #15
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	4013      	ands	r3, r2
 8001eee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a40      	ldr	r2, [pc, #256]	@ (8001ff4 <HAL_GPIO_Init+0x2c0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d013      	beq.n	8001f20 <HAL_GPIO_Init+0x1ec>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3f      	ldr	r2, [pc, #252]	@ (8001ff8 <HAL_GPIO_Init+0x2c4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00d      	beq.n	8001f1c <HAL_GPIO_Init+0x1e8>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3e      	ldr	r2, [pc, #248]	@ (8001ffc <HAL_GPIO_Init+0x2c8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d007      	beq.n	8001f18 <HAL_GPIO_Init+0x1e4>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3d      	ldr	r2, [pc, #244]	@ (8002000 <HAL_GPIO_Init+0x2cc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_GPIO_Init+0x1e0>
 8001f10:	2303      	movs	r3, #3
 8001f12:	e006      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f14:	2304      	movs	r3, #4
 8001f16:	e004      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_GPIO_Init+0x1ee>
 8001f20:	2300      	movs	r3, #0
 8001f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f24:	f002 0203 	and.w	r2, r2, #3
 8001f28:	0092      	lsls	r2, r2, #2
 8001f2a:	4093      	lsls	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f32:	492f      	ldr	r1, [pc, #188]	@ (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d006      	beq.n	8001f5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	492c      	ldr	r1, [pc, #176]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
 8001f58:	e006      	b.n	8001f68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	4928      	ldr	r1, [pc, #160]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d006      	beq.n	8001f82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f74:	4b23      	ldr	r3, [pc, #140]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	4922      	ldr	r1, [pc, #136]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f82:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	491e      	ldr	r1, [pc, #120]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f9c:	4b19      	ldr	r3, [pc, #100]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	4918      	ldr	r1, [pc, #96]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
 8001fa8:	e006      	b.n	8001fb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001faa:	4b16      	ldr	r3, [pc, #88]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	4914      	ldr	r1, [pc, #80]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d021      	beq.n	8002008 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	490e      	ldr	r1, [pc, #56]	@ (8002004 <HAL_GPIO_Init+0x2d0>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e021      	b.n	8002016 <HAL_GPIO_Init+0x2e2>
 8001fd2:	bf00      	nop
 8001fd4:	10320000 	.word	0x10320000
 8001fd8:	10310000 	.word	0x10310000
 8001fdc:	10220000 	.word	0x10220000
 8001fe0:	10210000 	.word	0x10210000
 8001fe4:	10120000 	.word	0x10120000
 8001fe8:	10110000 	.word	0x10110000
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	40010800 	.word	0x40010800
 8001ff8:	40010c00 	.word	0x40010c00
 8001ffc:	40011000 	.word	0x40011000
 8002000:	40011400 	.word	0x40011400
 8002004:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_GPIO_Init+0x304>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	43db      	mvns	r3, r3
 8002010:	4909      	ldr	r1, [pc, #36]	@ (8002038 <HAL_GPIO_Init+0x304>)
 8002012:	4013      	ands	r3, r2
 8002014:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	3301      	adds	r3, #1
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	fa22 f303 	lsr.w	r3, r2, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	f47f ae8e 	bne.w	8001d48 <HAL_GPIO_Init+0x14>
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	372c      	adds	r7, #44	@ 0x2c
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	887b      	ldrh	r3, [r7, #2]
 800204e:	4013      	ands	r3, r2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	e001      	b.n	800205e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr

0800206a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	807b      	strh	r3, [r7, #2]
 8002076:	4613      	mov	r3, r2
 8002078:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800207a:	787b      	ldrb	r3, [r7, #1]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002080:	887a      	ldrh	r2, [r7, #2]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002086:	e003      	b.n	8002090 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002088:	887b      	ldrh	r3, [r7, #2]
 800208a:	041a      	lsls	r2, r3, #16
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	611a      	str	r2, [r3, #16]
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	460b      	mov	r3, r1
 80020a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ac:	887a      	ldrh	r2, [r7, #2]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	041a      	lsls	r2, r3, #16
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	400b      	ands	r3, r1
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020d6:	4b08      	ldr	r3, [pc, #32]	@ (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f806 	bl	80020fc <HAL_GPIO_EXTI_Callback>
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e12b      	b.n	800237a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff faa0 	bl	800167c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	@ 0x24
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002174:	f001 f960 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8002178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	4a81      	ldr	r2, [pc, #516]	@ (8002384 <HAL_I2C_Init+0x274>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d807      	bhi.n	8002194 <HAL_I2C_Init+0x84>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4a80      	ldr	r2, [pc, #512]	@ (8002388 <HAL_I2C_Init+0x278>)
 8002188:	4293      	cmp	r3, r2
 800218a:	bf94      	ite	ls
 800218c:	2301      	movls	r3, #1
 800218e:	2300      	movhi	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e006      	b.n	80021a2 <HAL_I2C_Init+0x92>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a7d      	ldr	r2, [pc, #500]	@ (800238c <HAL_I2C_Init+0x27c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	bf94      	ite	ls
 800219c:	2301      	movls	r3, #1
 800219e:	2300      	movhi	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e0e7      	b.n	800237a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	4a78      	ldr	r2, [pc, #480]	@ (8002390 <HAL_I2C_Init+0x280>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0c9b      	lsrs	r3, r3, #18
 80021b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002384 <HAL_I2C_Init+0x274>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d802      	bhi.n	80021e4 <HAL_I2C_Init+0xd4>
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	3301      	adds	r3, #1
 80021e2:	e009      	b.n	80021f8 <HAL_I2C_Init+0xe8>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	4a69      	ldr	r2, [pc, #420]	@ (8002394 <HAL_I2C_Init+0x284>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	099b      	lsrs	r3, r3, #6
 80021f6:	3301      	adds	r3, #1
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	430b      	orrs	r3, r1
 80021fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800220a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	495c      	ldr	r1, [pc, #368]	@ (8002384 <HAL_I2C_Init+0x274>)
 8002214:	428b      	cmp	r3, r1
 8002216:	d819      	bhi.n	800224c <HAL_I2C_Init+0x13c>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	1e59      	subs	r1, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fbb1 f3f3 	udiv	r3, r1, r3
 8002226:	1c59      	adds	r1, r3, #1
 8002228:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800222c:	400b      	ands	r3, r1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00a      	beq.n	8002248 <HAL_I2C_Init+0x138>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1e59      	subs	r1, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002240:	3301      	adds	r3, #1
 8002242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002246:	e051      	b.n	80022ec <HAL_I2C_Init+0x1dc>
 8002248:	2304      	movs	r3, #4
 800224a:	e04f      	b.n	80022ec <HAL_I2C_Init+0x1dc>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d111      	bne.n	8002278 <HAL_I2C_Init+0x168>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1e58      	subs	r0, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6859      	ldr	r1, [r3, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	440b      	add	r3, r1
 8002262:	fbb0 f3f3 	udiv	r3, r0, r3
 8002266:	3301      	adds	r3, #1
 8002268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	e012      	b.n	800229e <HAL_I2C_Init+0x18e>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1e58      	subs	r0, r3, #1
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6859      	ldr	r1, [r3, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	0099      	lsls	r1, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	fbb0 f3f3 	udiv	r3, r0, r3
 800228e:	3301      	adds	r3, #1
 8002290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Init+0x196>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e022      	b.n	80022ec <HAL_I2C_Init+0x1dc>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10e      	bne.n	80022cc <HAL_I2C_Init+0x1bc>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1e58      	subs	r0, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6859      	ldr	r1, [r3, #4]
 80022b6:	460b      	mov	r3, r1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	440b      	add	r3, r1
 80022bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022ca:	e00f      	b.n	80022ec <HAL_I2C_Init+0x1dc>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1e58      	subs	r0, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	0099      	lsls	r1, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022ec:	6879      	ldr	r1, [r7, #4]
 80022ee:	6809      	ldr	r1, [r1, #0]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800231a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6911      	ldr	r1, [r2, #16]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	68d2      	ldr	r2, [r2, #12]
 8002326:	4311      	orrs	r1, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	430b      	orrs	r3, r1
 800232e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	000186a0 	.word	0x000186a0
 8002388:	001e847f 	.word	0x001e847f
 800238c:	003d08ff 	.word	0x003d08ff
 8002390:	431bde83 	.word	0x431bde83
 8002394:	10624dd3 	.word	0x10624dd3

08002398 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	607a      	str	r2, [r7, #4]
 80023a2:	461a      	mov	r2, r3
 80023a4:	460b      	mov	r3, r1
 80023a6:	817b      	strh	r3, [r7, #10]
 80023a8:	4613      	mov	r3, r2
 80023aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ac:	f7ff fb86 	bl	8001abc <HAL_GetTick>
 80023b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	f040 80e0 	bne.w	8002580 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	2319      	movs	r3, #25
 80023c6:	2201      	movs	r2, #1
 80023c8:	4970      	ldr	r1, [pc, #448]	@ (800258c <HAL_I2C_Master_Transmit+0x1f4>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 fa92 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023d6:	2302      	movs	r3, #2
 80023d8:	e0d3      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_I2C_Master_Transmit+0x50>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e0cc      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d007      	beq.n	800240e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800241c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2221      	movs	r2, #33	@ 0x21
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2210      	movs	r2, #16
 800242a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	893a      	ldrh	r2, [r7, #8]
 800243e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4a50      	ldr	r2, [pc, #320]	@ (8002590 <HAL_I2C_Master_Transmit+0x1f8>)
 800244e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002450:	8979      	ldrh	r1, [r7, #10]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	6a3a      	ldr	r2, [r7, #32]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f9ca 	bl	80027f0 <I2C_MasterRequestWrite>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e08d      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800247c:	e066      	b.n	800254c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	6a39      	ldr	r1, [r7, #32]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fb50 	bl	8002b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00d      	beq.n	80024aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	2b04      	cmp	r3, #4
 8002494:	d107      	bne.n	80024a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e06b      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d11b      	bne.n	8002520 <HAL_I2C_Master_Transmit+0x188>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d017      	beq.n	8002520 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f4:	781a      	ldrb	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002518:	3b01      	subs	r3, #1
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	6a39      	ldr	r1, [r7, #32]
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fb47 	bl	8002bb8 <I2C_WaitOnBTFFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00d      	beq.n	800254c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	2b04      	cmp	r3, #4
 8002536:	d107      	bne.n	8002548 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002546:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e01a      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d194      	bne.n	800247e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2220      	movs	r2, #32
 8002568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	e000      	b.n	8002582 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002580:	2302      	movs	r3, #2
  }
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	00100002 	.word	0x00100002
 8002590:	ffff0000 	.word	0xffff0000

08002594 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	@ 0x28
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff fa8a 	bl	8001abc <HAL_GetTick>
 80025a8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	f040 8111 	bne.w	80027de <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2319      	movs	r3, #25
 80025c2:	2201      	movs	r2, #1
 80025c4:	4988      	ldr	r1, [pc, #544]	@ (80027e8 <HAL_I2C_IsDeviceReady+0x254>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f994 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80025d2:	2302      	movs	r3, #2
 80025d4:	e104      	b.n	80027e0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_I2C_IsDeviceReady+0x50>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e0fd      	b.n	80027e0 <HAL_I2C_IsDeviceReady+0x24c>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d007      	beq.n	800260a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002618:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2224      	movs	r2, #36	@ 0x24
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a70      	ldr	r2, [pc, #448]	@ (80027ec <HAL_I2C_IsDeviceReady+0x258>)
 800262c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800263c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2200      	movs	r2, #0
 8002646:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f952 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00d      	beq.n	8002672 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002664:	d103      	bne.n	800266e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800266c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e0b6      	b.n	80027e0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002672:	897b      	ldrh	r3, [r7, #10]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002680:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002682:	f7ff fa1b 	bl	8001abc <HAL_GetTick>
 8002686:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	bf0c      	ite	eq
 8002696:	2301      	moveq	r3, #1
 8002698:	2300      	movne	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026ac:	bf0c      	ite	eq
 80026ae:	2301      	moveq	r3, #1
 80026b0:	2300      	movne	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80026b6:	e025      	b.n	8002704 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026b8:	f7ff fa00 	bl	8001abc <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d302      	bcc.n	80026ce <HAL_I2C_IsDeviceReady+0x13a>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	22a0      	movs	r2, #160	@ 0xa0
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	bf0c      	ite	eq
 80026e4:	2301      	moveq	r3, #1
 80026e6:	2300      	movne	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2ba0      	cmp	r3, #160	@ 0xa0
 800270e:	d005      	beq.n	800271c <HAL_I2C_IsDeviceReady+0x188>
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <HAL_I2C_IsDeviceReady+0x188>
 8002716:	7dbb      	ldrb	r3, [r7, #22]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0cd      	beq.n	80026b8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d129      	bne.n	8002786 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002740:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	2319      	movs	r3, #25
 800275e:	2201      	movs	r2, #1
 8002760:	4921      	ldr	r1, [pc, #132]	@ (80027e8 <HAL_I2C_IsDeviceReady+0x254>)
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f8c6 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e036      	b.n	80027e0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e02c      	b.n	80027e0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002794:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800279e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2319      	movs	r3, #25
 80027a6:	2201      	movs	r2, #1
 80027a8:	490f      	ldr	r1, [pc, #60]	@ (80027e8 <HAL_I2C_IsDeviceReady+0x254>)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f8a2 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e012      	b.n	80027e0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	3301      	adds	r3, #1
 80027be:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f4ff af32 	bcc.w	800262e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
  }
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	00100002 	.word	0x00100002
 80027ec:	ffff0000 	.word	0xffff0000

080027f0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	460b      	mov	r3, r1
 80027fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002804:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d006      	beq.n	800281a <I2C_MasterRequestWrite+0x2a>
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d003      	beq.n	800281a <I2C_MasterRequestWrite+0x2a>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002818:	d108      	bne.n	800282c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e00b      	b.n	8002844 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	2b12      	cmp	r3, #18
 8002832:	d107      	bne.n	8002844 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002842:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 f84f 	bl	80028f4 <I2C_WaitOnFlagUntilTimeout>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00d      	beq.n	8002878 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800286a:	d103      	bne.n	8002874 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002872:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e035      	b.n	80028e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002880:	d108      	bne.n	8002894 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002882:	897b      	ldrh	r3, [r7, #10]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002890:	611a      	str	r2, [r3, #16]
 8002892:	e01b      	b.n	80028cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002894:	897b      	ldrh	r3, [r7, #10]
 8002896:	11db      	asrs	r3, r3, #7
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0306 	and.w	r3, r3, #6
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f063 030f 	orn	r3, r3, #15
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	490e      	ldr	r1, [pc, #56]	@ (80028ec <I2C_MasterRequestWrite+0xfc>)
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 f898 	bl	80029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e010      	b.n	80028e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	4907      	ldr	r1, [pc, #28]	@ (80028f0 <I2C_MasterRequestWrite+0x100>)
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 f888 	bl	80029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e000      	b.n	80028e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	00010008 	.word	0x00010008
 80028f0:	00010002 	.word	0x00010002

080028f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	4613      	mov	r3, r2
 8002902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002904:	e048      	b.n	8002998 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d044      	beq.n	8002998 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800290e:	f7ff f8d5 	bl	8001abc <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d302      	bcc.n	8002924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d139      	bne.n	8002998 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10d      	bne.n	800294a <I2C_WaitOnFlagUntilTimeout+0x56>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	43da      	mvns	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4013      	ands	r3, r2
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	e00c      	b.n	8002964 <I2C_WaitOnFlagUntilTimeout+0x70>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	43da      	mvns	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf0c      	ite	eq
 800295c:	2301      	moveq	r3, #1
 800295e:	2300      	movne	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	461a      	mov	r2, r3
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	429a      	cmp	r2, r3
 8002968:	d116      	bne.n	8002998 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002984:	f043 0220 	orr.w	r2, r3, #32
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e023      	b.n	80029e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	0c1b      	lsrs	r3, r3, #16
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d10d      	bne.n	80029be <I2C_WaitOnFlagUntilTimeout+0xca>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	43da      	mvns	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	e00c      	b.n	80029d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	43da      	mvns	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	4013      	ands	r3, r2
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf0c      	ite	eq
 80029d0:	2301      	moveq	r3, #1
 80029d2:	2300      	movne	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d093      	beq.n	8002906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029f6:	e071      	b.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a06:	d123      	bne.n	8002a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	f043 0204 	orr.w	r2, r3, #4
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e067      	b.n	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a56:	d041      	beq.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a58:	f7ff f830 	bl	8001abc <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d302      	bcc.n	8002a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d136      	bne.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d10c      	bne.n	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4013      	ands	r3, r2
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	2301      	movne	r3, #1
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	e00b      	b.n	8002aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e021      	b.n	8002b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	0c1b      	lsrs	r3, r3, #16
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d10c      	bne.n	8002b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	43da      	mvns	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	4013      	ands	r3, r2
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e00b      	b.n	8002b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bf14      	ite	ne
 8002b12:	2301      	movne	r3, #1
 8002b14:	2300      	moveq	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f47f af6d 	bne.w	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b34:	e034      	b.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f886 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e034      	b.n	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4c:	d028      	beq.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4e:	f7fe ffb5 	bl	8001abc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d302      	bcc.n	8002b64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d11d      	bne.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b80      	cmp	r3, #128	@ 0x80
 8002b70:	d016      	beq.n	8002ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e007      	b.n	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002baa:	2b80      	cmp	r3, #128	@ 0x80
 8002bac:	d1c3      	bne.n	8002b36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bc4:	e034      	b.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f83e 	bl	8002c48 <I2C_IsAcknowledgeFailed>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e034      	b.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bdc:	d028      	beq.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bde:	f7fe ff6d 	bl	8001abc <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d302      	bcc.n	8002bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d11d      	bne.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d016      	beq.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e007      	b.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d1c3      	bne.n	8002bc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5e:	d11b      	bne.n	8002c98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	f043 0204 	orr.w	r2, r3, #4
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e272      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8087 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc4:	4b92      	ldr	r3, [pc, #584]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d00c      	beq.n	8002cea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cd0:	4b8f      	ldr	r3, [pc, #572]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d112      	bne.n	8002d02 <HAL_RCC_OscConfig+0x5e>
 8002cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ce8:	d10b      	bne.n	8002d02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cea:	4b89      	ldr	r3, [pc, #548]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d06c      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x12c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d168      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e24c      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d0a:	d106      	bne.n	8002d1a <HAL_RCC_OscConfig+0x76>
 8002d0c:	4b80      	ldr	r3, [pc, #512]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a7f      	ldr	r2, [pc, #508]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	e02e      	b.n	8002d78 <HAL_RCC_OscConfig+0xd4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x98>
 8002d22:	4b7b      	ldr	r3, [pc, #492]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a7a      	ldr	r2, [pc, #488]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b78      	ldr	r3, [pc, #480]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a77      	ldr	r2, [pc, #476]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e01d      	b.n	8002d78 <HAL_RCC_OscConfig+0xd4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0xbc>
 8002d46:	4b72      	ldr	r3, [pc, #456]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a71      	ldr	r2, [pc, #452]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b6f      	ldr	r3, [pc, #444]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a6e      	ldr	r2, [pc, #440]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	e00b      	b.n	8002d78 <HAL_RCC_OscConfig+0xd4>
 8002d60:	4b6b      	ldr	r3, [pc, #428]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a6a      	ldr	r2, [pc, #424]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d6a:	6013      	str	r3, [r2, #0]
 8002d6c:	4b68      	ldr	r3, [pc, #416]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a67      	ldr	r2, [pc, #412]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe fe9c 	bl	8001abc <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d88:	f7fe fe98 	bl	8001abc <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b64      	cmp	r3, #100	@ 0x64
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e200      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0xe4>
 8002da6:	e014      	b.n	8002dd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe fe88 	bl	8001abc <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db0:	f7fe fe84 	bl	8001abc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	@ 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1ec      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dc2:	4b53      	ldr	r3, [pc, #332]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x10c>
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d063      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dde:	4b4c      	ldr	r3, [pc, #304]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00b      	beq.n	8002e02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002dea:	4b49      	ldr	r3, [pc, #292]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d11c      	bne.n	8002e30 <HAL_RCC_OscConfig+0x18c>
 8002df6:	4b46      	ldr	r3, [pc, #280]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d116      	bne.n	8002e30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_RCC_OscConfig+0x176>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d001      	beq.n	8002e1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e1c0      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	4939      	ldr	r1, [pc, #228]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2e:	e03a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d020      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e38:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fe3d 	bl	8001abc <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe fe39 	bl	8001abc <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e1a1      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e58:	4b2d      	ldr	r3, [pc, #180]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e64:	4b2a      	ldr	r3, [pc, #168]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4927      	ldr	r1, [pc, #156]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	600b      	str	r3, [r1, #0]
 8002e78:	e015      	b.n	8002ea6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e7a:	4b26      	ldr	r3, [pc, #152]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fe1c 	bl	8001abc <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e88:	f7fe fe18 	bl	8001abc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e180      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d03a      	beq.n	8002f28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d019      	beq.n	8002eee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eba:	4b17      	ldr	r3, [pc, #92]	@ (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fdfc 	bl	8001abc <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fdf8 	bl	8001abc <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e160      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eda:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f000 faba 	bl	8003460 <RCC_Delay>
 8002eec:	e01c      	b.n	8002f28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eee:	4b0a      	ldr	r3, [pc, #40]	@ (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef4:	f7fe fde2 	bl	8001abc <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efa:	e00f      	b.n	8002f1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002efc:	f7fe fdde 	bl	8001abc <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d908      	bls.n	8002f1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e146      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
 8002f14:	42420000 	.word	0x42420000
 8002f18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	4b92      	ldr	r3, [pc, #584]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e9      	bne.n	8002efc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0304 	and.w	r3, r3, #4
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80a6 	beq.w	8003082 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f3a:	4b8b      	ldr	r3, [pc, #556]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10d      	bne.n	8002f62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	4b88      	ldr	r3, [pc, #544]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4a87      	ldr	r2, [pc, #540]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	61d3      	str	r3, [r2, #28]
 8002f52:	4b85      	ldr	r3, [pc, #532]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f62:	4b82      	ldr	r3, [pc, #520]	@ (800316c <HAL_RCC_OscConfig+0x4c8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d118      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800316c <HAL_RCC_OscConfig+0x4c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a7e      	ldr	r2, [pc, #504]	@ (800316c <HAL_RCC_OscConfig+0x4c8>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7fe fd9f 	bl	8001abc <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7fe fd9b 	bl	8001abc <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b64      	cmp	r3, #100	@ 0x64
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e103      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f94:	4b75      	ldr	r3, [pc, #468]	@ (800316c <HAL_RCC_OscConfig+0x4c8>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d106      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x312>
 8002fa8:	4b6f      	ldr	r3, [pc, #444]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4a6e      	ldr	r2, [pc, #440]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6213      	str	r3, [r2, #32]
 8002fb4:	e02d      	b.n	8003012 <HAL_RCC_OscConfig+0x36e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x334>
 8002fbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4a69      	ldr	r2, [pc, #420]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	6213      	str	r3, [r2, #32]
 8002fca:	4b67      	ldr	r3, [pc, #412]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4a66      	ldr	r2, [pc, #408]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	6213      	str	r3, [r2, #32]
 8002fd6:	e01c      	b.n	8003012 <HAL_RCC_OscConfig+0x36e>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d10c      	bne.n	8002ffa <HAL_RCC_OscConfig+0x356>
 8002fe0:	4b61      	ldr	r3, [pc, #388]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	4a60      	ldr	r2, [pc, #384]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fe6:	f043 0304 	orr.w	r3, r3, #4
 8002fea:	6213      	str	r3, [r2, #32]
 8002fec:	4b5e      	ldr	r3, [pc, #376]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4a5d      	ldr	r2, [pc, #372]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6213      	str	r3, [r2, #32]
 8002ff8:	e00b      	b.n	8003012 <HAL_RCC_OscConfig+0x36e>
 8002ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4a5a      	ldr	r2, [pc, #360]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	f023 0301 	bic.w	r3, r3, #1
 8003004:	6213      	str	r3, [r2, #32]
 8003006:	4b58      	ldr	r3, [pc, #352]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a57      	ldr	r2, [pc, #348]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	f023 0304 	bic.w	r3, r3, #4
 8003010:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d015      	beq.n	8003046 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301a:	f7fe fd4f 	bl	8001abc <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003020:	e00a      	b.n	8003038 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fe fd4b 	bl	8001abc <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0b1      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	4b4b      	ldr	r3, [pc, #300]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ee      	beq.n	8003022 <HAL_RCC_OscConfig+0x37e>
 8003044:	e014      	b.n	8003070 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7fe fd39 	bl	8001abc <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7fe fd35 	bl	8001abc <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e09b      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	4b40      	ldr	r3, [pc, #256]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1ee      	bne.n	800304e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d105      	bne.n	8003082 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003076:	4b3c      	ldr	r3, [pc, #240]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	4a3b      	ldr	r2, [pc, #236]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800307c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003080:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 8087 	beq.w	800319a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800308c:	4b36      	ldr	r3, [pc, #216]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d061      	beq.n	800315c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d146      	bne.n	800312e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	4b33      	ldr	r3, [pc, #204]	@ (8003170 <HAL_RCC_OscConfig+0x4cc>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a6:	f7fe fd09 	bl	8001abc <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ae:	f7fe fd05 	bl	8001abc <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e06d      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c0:	4b29      	ldr	r3, [pc, #164]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f0      	bne.n	80030ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d4:	d108      	bne.n	80030e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030d6:	4b24      	ldr	r3, [pc, #144]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	4921      	ldr	r1, [pc, #132]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a19      	ldr	r1, [r3, #32]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	430b      	orrs	r3, r1
 80030fa:	491b      	ldr	r1, [pc, #108]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003100:	4b1b      	ldr	r3, [pc, #108]	@ (8003170 <HAL_RCC_OscConfig+0x4cc>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003106:	f7fe fcd9 	bl	8001abc <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310e:	f7fe fcd5 	bl	8001abc <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e03d      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x46a>
 800312c:	e035      	b.n	800319a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312e:	4b10      	ldr	r3, [pc, #64]	@ (8003170 <HAL_RCC_OscConfig+0x4cc>)
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe fcc2 	bl	8001abc <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800313c:	f7fe fcbe 	bl	8001abc <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b02      	cmp	r3, #2
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e026      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314e:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f0      	bne.n	800313c <HAL_RCC_OscConfig+0x498>
 800315a:	e01e      	b.n	800319a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d107      	bne.n	8003174 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e019      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
 8003168:	40021000 	.word	0x40021000
 800316c:	40007000 	.word	0x40007000
 8003170:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003174:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <HAL_RCC_OscConfig+0x500>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	429a      	cmp	r2, r3
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40021000 	.word	0x40021000

080031a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0d0      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d910      	bls.n	80031ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b67      	ldr	r3, [pc, #412]	@ (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 0207 	bic.w	r2, r3, #7
 80031d2:	4965      	ldr	r1, [pc, #404]	@ (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b63      	ldr	r3, [pc, #396]	@ (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0b8      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003204:	4b59      	ldr	r3, [pc, #356]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a58      	ldr	r2, [pc, #352]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 800320a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800320e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800321c:	4b53      	ldr	r3, [pc, #332]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4a52      	ldr	r2, [pc, #328]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003222:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003226:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003228:	4b50      	ldr	r3, [pc, #320]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	494d      	ldr	r1, [pc, #308]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	4313      	orrs	r3, r2
 8003238:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d040      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	4b47      	ldr	r3, [pc, #284]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d115      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e07f      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003266:	4b41      	ldr	r3, [pc, #260]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e073      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003276:	4b3d      	ldr	r3, [pc, #244]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e06b      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003286:	4b39      	ldr	r3, [pc, #228]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f023 0203 	bic.w	r2, r3, #3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4936      	ldr	r1, [pc, #216]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	4313      	orrs	r3, r2
 8003296:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003298:	f7fe fc10 	bl	8001abc <HAL_GetTick>
 800329c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a0:	f7fe fc0c 	bl	8001abc <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e053      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b6:	4b2d      	ldr	r3, [pc, #180]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 020c 	and.w	r2, r3, #12
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d1eb      	bne.n	80032a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c8:	4b27      	ldr	r3, [pc, #156]	@ (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d210      	bcs.n	80032f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b24      	ldr	r3, [pc, #144]	@ (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 0207 	bic.w	r2, r3, #7
 80032de:	4922      	ldr	r1, [pc, #136]	@ (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b20      	ldr	r3, [pc, #128]	@ (8003368 <HAL_RCC_ClockConfig+0x1c0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e032      	b.n	800335e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003304:	4b19      	ldr	r3, [pc, #100]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4916      	ldr	r1, [pc, #88]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003322:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	490e      	ldr	r1, [pc, #56]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003336:	f000 f821 	bl	800337c <HAL_RCC_GetSysClockFreq>
 800333a:	4602      	mov	r2, r0
 800333c:	4b0b      	ldr	r3, [pc, #44]	@ (800336c <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	490a      	ldr	r1, [pc, #40]	@ (8003370 <HAL_RCC_ClockConfig+0x1c8>)
 8003348:	5ccb      	ldrb	r3, [r1, r3]
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	4a09      	ldr	r2, [pc, #36]	@ (8003374 <HAL_RCC_ClockConfig+0x1cc>)
 8003350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003352:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <HAL_RCC_ClockConfig+0x1d0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fb6e 	bl	8001a38 <HAL_InitTick>

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40022000 	.word	0x40022000
 800336c:	40021000 	.word	0x40021000
 8003370:	08006778 	.word	0x08006778
 8003374:	20000010 	.word	0x20000010
 8003378:	20000014 	.word	0x20000014

0800337c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003396:	4b1e      	ldr	r3, [pc, #120]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x94>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d002      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x30>
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d003      	beq.n	80033b2 <HAL_RCC_GetSysClockFreq+0x36>
 80033aa:	e027      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033ac:	4b19      	ldr	r3, [pc, #100]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ae:	613b      	str	r3, [r7, #16]
      break;
 80033b0:	e027      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	0c9b      	lsrs	r3, r3, #18
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	4a17      	ldr	r2, [pc, #92]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033bc:	5cd3      	ldrb	r3, [r2, r3]
 80033be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d010      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ca:	4b11      	ldr	r3, [pc, #68]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x94>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0c5b      	lsrs	r3, r3, #17
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	4a11      	ldr	r2, [pc, #68]	@ (800341c <HAL_RCC_GetSysClockFreq+0xa0>)
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x98>)
 80033de:	fb03 f202 	mul.w	r2, r3, r2
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	e004      	b.n	80033f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003420 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033f0:	fb02 f303 	mul.w	r3, r2, r3
 80033f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	613b      	str	r3, [r7, #16]
      break;
 80033fa:	e002      	b.n	8003402 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x98>)
 80033fe:	613b      	str	r3, [r7, #16]
      break;
 8003400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003402:	693b      	ldr	r3, [r7, #16]
}
 8003404:	4618      	mov	r0, r3
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40021000 	.word	0x40021000
 8003414:	007a1200 	.word	0x007a1200
 8003418:	08006790 	.word	0x08006790
 800341c:	080067a0 	.word	0x080067a0
 8003420:	003d0900 	.word	0x003d0900

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003428:	4b02      	ldr	r3, [pc, #8]	@ (8003434 <HAL_RCC_GetHCLKFreq+0x10>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	20000010 	.word	0x20000010

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff2 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	@ (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	@ (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000
 800345c:	08006788 	.word	0x08006788

08003460 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003468:	4b0a      	ldr	r3, [pc, #40]	@ (8003494 <RCC_Delay+0x34>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a0a      	ldr	r2, [pc, #40]	@ (8003498 <RCC_Delay+0x38>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	0a5b      	lsrs	r3, r3, #9
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800347c:	bf00      	nop
  }
  while (Delay --);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1e5a      	subs	r2, r3, #1
 8003482:	60fa      	str	r2, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f9      	bne.n	800347c <RCC_Delay+0x1c>
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	20000010 	.word	0x20000010
 8003498:	10624dd3 	.word	0x10624dd3

0800349c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e041      	b.n	8003532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe f918 	bl	80016f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f000 faae 	bl	8003a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d001      	beq.n	8003554 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e032      	b.n	80035ba <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a18      	ldr	r2, [pc, #96]	@ (80035c4 <HAL_TIM_Base_Start+0x88>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00e      	beq.n	8003584 <HAL_TIM_Base_Start+0x48>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356e:	d009      	beq.n	8003584 <HAL_TIM_Base_Start+0x48>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a14      	ldr	r2, [pc, #80]	@ (80035c8 <HAL_TIM_Base_Start+0x8c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_TIM_Base_Start+0x48>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a13      	ldr	r2, [pc, #76]	@ (80035cc <HAL_TIM_Base_Start+0x90>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d111      	bne.n	80035a8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2b06      	cmp	r3, #6
 8003594:	d010      	beq.n	80035b8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035a6:	e007      	b.n	80035b8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0201 	orr.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800

080035d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d001      	beq.n	80035e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e03a      	b.n	800365e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a18      	ldr	r2, [pc, #96]	@ (8003668 <HAL_TIM_Base_Start_IT+0x98>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00e      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x58>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003612:	d009      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x58>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a14      	ldr	r2, [pc, #80]	@ (800366c <HAL_TIM_Base_Start_IT+0x9c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_TIM_Base_Start_IT+0x58>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a13      	ldr	r2, [pc, #76]	@ (8003670 <HAL_TIM_Base_Start_IT+0xa0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d111      	bne.n	800364c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f003 0307 	and.w	r3, r3, #7
 8003632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b06      	cmp	r3, #6
 8003638:	d010      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0201 	orr.w	r2, r2, #1
 8003648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364a:	e007      	b.n	800365c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr
 8003668:	40012c00 	.word	0x40012c00
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800

08003674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d020      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0202 	mvn.w	r2, #2
 80036a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9a1 	bl	8003a06 <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f994 	bl	80039f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f9a3 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d020      	beq.n	8003724 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0204 	mvn.w	r2, #4
 80036f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2202      	movs	r2, #2
 80036fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f97b 	bl	8003a06 <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f96e 	bl	80039f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f97d 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d020      	beq.n	8003770 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01b      	beq.n	8003770 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0208 	mvn.w	r2, #8
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2204      	movs	r2, #4
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f955 	bl	8003a06 <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f948 	bl	80039f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f957 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	d020      	beq.n	80037bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01b      	beq.n	80037bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0210 	mvn.w	r2, #16
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2208      	movs	r2, #8
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f92f 	bl	8003a06 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f922 	bl	80039f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f931 	bl	8003a18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00c      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0201 	mvn.w	r2, #1
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f901 	bl	80039e2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00c      	beq.n	8003804 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fa87 	bl	8003d12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f901 	bl	8003a2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00c      	beq.n	800384c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d007      	beq.n	800384c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0220 	mvn.w	r2, #32
 8003844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fa5a 	bl	8003d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_TIM_ConfigClockSource+0x1c>
 800386c:	2302      	movs	r3, #2
 800386e:	e0b4      	b.n	80039da <HAL_TIM_ConfigClockSource+0x186>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800388e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003896:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a8:	d03e      	beq.n	8003928 <HAL_TIM_ConfigClockSource+0xd4>
 80038aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ae:	f200 8087 	bhi.w	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b6:	f000 8086 	beq.w	80039c6 <HAL_TIM_ConfigClockSource+0x172>
 80038ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038be:	d87f      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b70      	cmp	r3, #112	@ 0x70
 80038c2:	d01a      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0xa6>
 80038c4:	2b70      	cmp	r3, #112	@ 0x70
 80038c6:	d87b      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b60      	cmp	r3, #96	@ 0x60
 80038ca:	d050      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x11a>
 80038cc:	2b60      	cmp	r3, #96	@ 0x60
 80038ce:	d877      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b50      	cmp	r3, #80	@ 0x50
 80038d2:	d03c      	beq.n	800394e <HAL_TIM_ConfigClockSource+0xfa>
 80038d4:	2b50      	cmp	r3, #80	@ 0x50
 80038d6:	d873      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b40      	cmp	r3, #64	@ 0x40
 80038da:	d058      	beq.n	800398e <HAL_TIM_ConfigClockSource+0x13a>
 80038dc:	2b40      	cmp	r3, #64	@ 0x40
 80038de:	d86f      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b30      	cmp	r3, #48	@ 0x30
 80038e2:	d064      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15a>
 80038e4:	2b30      	cmp	r3, #48	@ 0x30
 80038e6:	d86b      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d060      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15a>
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d867      	bhi.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d05c      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15a>
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d05a      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x15a>
 80038f8:	e062      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800390a:	f000 f97c 	bl	8003c06 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800391c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	609a      	str	r2, [r3, #8]
      break;
 8003926:	e04f      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003938:	f000 f965 	bl	8003c06 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800394a:	609a      	str	r2, [r3, #8]
      break;
 800394c:	e03c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	461a      	mov	r2, r3
 800395c:	f000 f8dc 	bl	8003b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2150      	movs	r1, #80	@ 0x50
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f933 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 800396c:	e02c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800397a:	461a      	mov	r2, r3
 800397c:	f000 f8fa 	bl	8003b74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2160      	movs	r1, #96	@ 0x60
 8003986:	4618      	mov	r0, r3
 8003988:	f000 f923 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 800398c:	e01c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399a:	461a      	mov	r2, r3
 800399c:	f000 f8bc 	bl	8003b18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2140      	movs	r1, #64	@ 0x40
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f913 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 80039ac:	e00c      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f000 f90a 	bl	8003bd2 <TIM_ITRx_SetConfig>
      break;
 80039be:	e003      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
      break;
 80039c4:	e000      	b.n	80039c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr

08003a06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr

08003a18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr

08003a2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b0c <TIM_Base_SetConfig+0xd0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0x30>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x30>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b10 <TIM_Base_SetConfig+0xd4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x30>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a2b      	ldr	r2, [pc, #172]	@ (8003b14 <TIM_Base_SetConfig+0xd8>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a22      	ldr	r2, [pc, #136]	@ (8003b0c <TIM_Base_SetConfig+0xd0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00b      	beq.n	8003a9e <TIM_Base_SetConfig+0x62>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8c:	d007      	beq.n	8003a9e <TIM_Base_SetConfig+0x62>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a1f      	ldr	r2, [pc, #124]	@ (8003b10 <TIM_Base_SetConfig+0xd4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d003      	beq.n	8003a9e <TIM_Base_SetConfig+0x62>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a1e      	ldr	r2, [pc, #120]	@ (8003b14 <TIM_Base_SetConfig+0xd8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b0c <TIM_Base_SetConfig+0xd0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d103      	bne.n	8003ae4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f023 0201 	bic.w	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	611a      	str	r2, [r3, #16]
  }
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800

08003b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 0201 	bic.w	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	f023 030a 	bic.w	r3, r3, #10
 8003b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f023 0210 	bic.w	r2, r3, #16
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	031b      	lsls	r3, r3, #12
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	621a      	str	r2, [r3, #32]
}
 8003bc8:	bf00      	nop
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bc80      	pop	{r7}
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b085      	sub	sp, #20
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f043 0307 	orr.w	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	3714      	adds	r7, #20
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr

08003c06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	021a      	lsls	r2, r3, #8
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	609a      	str	r2, [r3, #8]
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bc80      	pop	{r7}
 8003c42:	4770      	bx	lr

08003c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e046      	b.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a16      	ldr	r2, [pc, #88]	@ (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca8:	d009      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a12      	ldr	r2, [pc, #72]	@ (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a10      	ldr	r2, [pc, #64]	@ (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800

08003d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bc80      	pop	{r7}
 8003d10:	4770      	bx	lr

08003d12 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr

08003d24 <siprintf>:
 8003d24:	b40e      	push	{r1, r2, r3}
 8003d26:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003d2a:	b500      	push	{lr}
 8003d2c:	b09c      	sub	sp, #112	@ 0x70
 8003d2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003d30:	9002      	str	r0, [sp, #8]
 8003d32:	9006      	str	r0, [sp, #24]
 8003d34:	9107      	str	r1, [sp, #28]
 8003d36:	9104      	str	r1, [sp, #16]
 8003d38:	4808      	ldr	r0, [pc, #32]	@ (8003d5c <siprintf+0x38>)
 8003d3a:	4909      	ldr	r1, [pc, #36]	@ (8003d60 <siprintf+0x3c>)
 8003d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d40:	9105      	str	r1, [sp, #20]
 8003d42:	6800      	ldr	r0, [r0, #0]
 8003d44:	a902      	add	r1, sp, #8
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	f000 f992 	bl	8004070 <_svfiprintf_r>
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	9b02      	ldr	r3, [sp, #8]
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	b01c      	add	sp, #112	@ 0x70
 8003d54:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d58:	b003      	add	sp, #12
 8003d5a:	4770      	bx	lr
 8003d5c:	2000001c 	.word	0x2000001c
 8003d60:	ffff0208 	.word	0xffff0208

08003d64 <memset>:
 8003d64:	4603      	mov	r3, r0
 8003d66:	4402      	add	r2, r0
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d100      	bne.n	8003d6e <memset+0xa>
 8003d6c:	4770      	bx	lr
 8003d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d72:	e7f9      	b.n	8003d68 <memset+0x4>

08003d74 <__errno>:
 8003d74:	4b01      	ldr	r3, [pc, #4]	@ (8003d7c <__errno+0x8>)
 8003d76:	6818      	ldr	r0, [r3, #0]
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	2000001c 	.word	0x2000001c

08003d80 <__libc_init_array>:
 8003d80:	b570      	push	{r4, r5, r6, lr}
 8003d82:	2600      	movs	r6, #0
 8003d84:	4d0c      	ldr	r5, [pc, #48]	@ (8003db8 <__libc_init_array+0x38>)
 8003d86:	4c0d      	ldr	r4, [pc, #52]	@ (8003dbc <__libc_init_array+0x3c>)
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	42a6      	cmp	r6, r4
 8003d8e:	d109      	bne.n	8003da4 <__libc_init_array+0x24>
 8003d90:	f000 fc78 	bl	8004684 <_init>
 8003d94:	2600      	movs	r6, #0
 8003d96:	4d0a      	ldr	r5, [pc, #40]	@ (8003dc0 <__libc_init_array+0x40>)
 8003d98:	4c0a      	ldr	r4, [pc, #40]	@ (8003dc4 <__libc_init_array+0x44>)
 8003d9a:	1b64      	subs	r4, r4, r5
 8003d9c:	10a4      	asrs	r4, r4, #2
 8003d9e:	42a6      	cmp	r6, r4
 8003da0:	d105      	bne.n	8003dae <__libc_init_array+0x2e>
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
 8003da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da8:	4798      	blx	r3
 8003daa:	3601      	adds	r6, #1
 8003dac:	e7ee      	b.n	8003d8c <__libc_init_array+0xc>
 8003dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003db2:	4798      	blx	r3
 8003db4:	3601      	adds	r6, #1
 8003db6:	e7f2      	b.n	8003d9e <__libc_init_array+0x1e>
 8003db8:	080067d8 	.word	0x080067d8
 8003dbc:	080067d8 	.word	0x080067d8
 8003dc0:	080067d8 	.word	0x080067d8
 8003dc4:	080067dc 	.word	0x080067dc

08003dc8 <__retarget_lock_acquire_recursive>:
 8003dc8:	4770      	bx	lr

08003dca <__retarget_lock_release_recursive>:
 8003dca:	4770      	bx	lr

08003dcc <_free_r>:
 8003dcc:	b538      	push	{r3, r4, r5, lr}
 8003dce:	4605      	mov	r5, r0
 8003dd0:	2900      	cmp	r1, #0
 8003dd2:	d040      	beq.n	8003e56 <_free_r+0x8a>
 8003dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003dd8:	1f0c      	subs	r4, r1, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bfb8      	it	lt
 8003dde:	18e4      	addlt	r4, r4, r3
 8003de0:	f000 f8de 	bl	8003fa0 <__malloc_lock>
 8003de4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e58 <_free_r+0x8c>)
 8003de6:	6813      	ldr	r3, [r2, #0]
 8003de8:	b933      	cbnz	r3, 8003df8 <_free_r+0x2c>
 8003dea:	6063      	str	r3, [r4, #4]
 8003dec:	6014      	str	r4, [r2, #0]
 8003dee:	4628      	mov	r0, r5
 8003df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003df4:	f000 b8da 	b.w	8003fac <__malloc_unlock>
 8003df8:	42a3      	cmp	r3, r4
 8003dfa:	d908      	bls.n	8003e0e <_free_r+0x42>
 8003dfc:	6820      	ldr	r0, [r4, #0]
 8003dfe:	1821      	adds	r1, r4, r0
 8003e00:	428b      	cmp	r3, r1
 8003e02:	bf01      	itttt	eq
 8003e04:	6819      	ldreq	r1, [r3, #0]
 8003e06:	685b      	ldreq	r3, [r3, #4]
 8003e08:	1809      	addeq	r1, r1, r0
 8003e0a:	6021      	streq	r1, [r4, #0]
 8003e0c:	e7ed      	b.n	8003dea <_free_r+0x1e>
 8003e0e:	461a      	mov	r2, r3
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	b10b      	cbz	r3, 8003e18 <_free_r+0x4c>
 8003e14:	42a3      	cmp	r3, r4
 8003e16:	d9fa      	bls.n	8003e0e <_free_r+0x42>
 8003e18:	6811      	ldr	r1, [r2, #0]
 8003e1a:	1850      	adds	r0, r2, r1
 8003e1c:	42a0      	cmp	r0, r4
 8003e1e:	d10b      	bne.n	8003e38 <_free_r+0x6c>
 8003e20:	6820      	ldr	r0, [r4, #0]
 8003e22:	4401      	add	r1, r0
 8003e24:	1850      	adds	r0, r2, r1
 8003e26:	4283      	cmp	r3, r0
 8003e28:	6011      	str	r1, [r2, #0]
 8003e2a:	d1e0      	bne.n	8003dee <_free_r+0x22>
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4408      	add	r0, r1
 8003e32:	6010      	str	r0, [r2, #0]
 8003e34:	6053      	str	r3, [r2, #4]
 8003e36:	e7da      	b.n	8003dee <_free_r+0x22>
 8003e38:	d902      	bls.n	8003e40 <_free_r+0x74>
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	602b      	str	r3, [r5, #0]
 8003e3e:	e7d6      	b.n	8003dee <_free_r+0x22>
 8003e40:	6820      	ldr	r0, [r4, #0]
 8003e42:	1821      	adds	r1, r4, r0
 8003e44:	428b      	cmp	r3, r1
 8003e46:	bf01      	itttt	eq
 8003e48:	6819      	ldreq	r1, [r3, #0]
 8003e4a:	685b      	ldreq	r3, [r3, #4]
 8003e4c:	1809      	addeq	r1, r1, r0
 8003e4e:	6021      	streq	r1, [r4, #0]
 8003e50:	6063      	str	r3, [r4, #4]
 8003e52:	6054      	str	r4, [r2, #4]
 8003e54:	e7cb      	b.n	8003dee <_free_r+0x22>
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	2000072c 	.word	0x2000072c

08003e5c <sbrk_aligned>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4e0f      	ldr	r6, [pc, #60]	@ (8003e9c <sbrk_aligned+0x40>)
 8003e60:	460c      	mov	r4, r1
 8003e62:	6831      	ldr	r1, [r6, #0]
 8003e64:	4605      	mov	r5, r0
 8003e66:	b911      	cbnz	r1, 8003e6e <sbrk_aligned+0x12>
 8003e68:	f000 fbaa 	bl	80045c0 <_sbrk_r>
 8003e6c:	6030      	str	r0, [r6, #0]
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4628      	mov	r0, r5
 8003e72:	f000 fba5 	bl	80045c0 <_sbrk_r>
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	d103      	bne.n	8003e82 <sbrk_aligned+0x26>
 8003e7a:	f04f 34ff 	mov.w	r4, #4294967295
 8003e7e:	4620      	mov	r0, r4
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	1cc4      	adds	r4, r0, #3
 8003e84:	f024 0403 	bic.w	r4, r4, #3
 8003e88:	42a0      	cmp	r0, r4
 8003e8a:	d0f8      	beq.n	8003e7e <sbrk_aligned+0x22>
 8003e8c:	1a21      	subs	r1, r4, r0
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f000 fb96 	bl	80045c0 <_sbrk_r>
 8003e94:	3001      	adds	r0, #1
 8003e96:	d1f2      	bne.n	8003e7e <sbrk_aligned+0x22>
 8003e98:	e7ef      	b.n	8003e7a <sbrk_aligned+0x1e>
 8003e9a:	bf00      	nop
 8003e9c:	20000728 	.word	0x20000728

08003ea0 <_malloc_r>:
 8003ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea4:	1ccd      	adds	r5, r1, #3
 8003ea6:	f025 0503 	bic.w	r5, r5, #3
 8003eaa:	3508      	adds	r5, #8
 8003eac:	2d0c      	cmp	r5, #12
 8003eae:	bf38      	it	cc
 8003eb0:	250c      	movcc	r5, #12
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	4606      	mov	r6, r0
 8003eb6:	db01      	blt.n	8003ebc <_malloc_r+0x1c>
 8003eb8:	42a9      	cmp	r1, r5
 8003eba:	d904      	bls.n	8003ec6 <_malloc_r+0x26>
 8003ebc:	230c      	movs	r3, #12
 8003ebe:	6033      	str	r3, [r6, #0]
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ec6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f9c <_malloc_r+0xfc>
 8003eca:	f000 f869 	bl	8003fa0 <__malloc_lock>
 8003ece:	f8d8 3000 	ldr.w	r3, [r8]
 8003ed2:	461c      	mov	r4, r3
 8003ed4:	bb44      	cbnz	r4, 8003f28 <_malloc_r+0x88>
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4630      	mov	r0, r6
 8003eda:	f7ff ffbf 	bl	8003e5c <sbrk_aligned>
 8003ede:	1c43      	adds	r3, r0, #1
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	d158      	bne.n	8003f96 <_malloc_r+0xf6>
 8003ee4:	f8d8 4000 	ldr.w	r4, [r8]
 8003ee8:	4627      	mov	r7, r4
 8003eea:	2f00      	cmp	r7, #0
 8003eec:	d143      	bne.n	8003f76 <_malloc_r+0xd6>
 8003eee:	2c00      	cmp	r4, #0
 8003ef0:	d04b      	beq.n	8003f8a <_malloc_r+0xea>
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	4639      	mov	r1, r7
 8003ef6:	4630      	mov	r0, r6
 8003ef8:	eb04 0903 	add.w	r9, r4, r3
 8003efc:	f000 fb60 	bl	80045c0 <_sbrk_r>
 8003f00:	4581      	cmp	r9, r0
 8003f02:	d142      	bne.n	8003f8a <_malloc_r+0xea>
 8003f04:	6821      	ldr	r1, [r4, #0]
 8003f06:	4630      	mov	r0, r6
 8003f08:	1a6d      	subs	r5, r5, r1
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	f7ff ffa6 	bl	8003e5c <sbrk_aligned>
 8003f10:	3001      	adds	r0, #1
 8003f12:	d03a      	beq.n	8003f8a <_malloc_r+0xea>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	442b      	add	r3, r5
 8003f18:	6023      	str	r3, [r4, #0]
 8003f1a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	bb62      	cbnz	r2, 8003f7c <_malloc_r+0xdc>
 8003f22:	f8c8 7000 	str.w	r7, [r8]
 8003f26:	e00f      	b.n	8003f48 <_malloc_r+0xa8>
 8003f28:	6822      	ldr	r2, [r4, #0]
 8003f2a:	1b52      	subs	r2, r2, r5
 8003f2c:	d420      	bmi.n	8003f70 <_malloc_r+0xd0>
 8003f2e:	2a0b      	cmp	r2, #11
 8003f30:	d917      	bls.n	8003f62 <_malloc_r+0xc2>
 8003f32:	1961      	adds	r1, r4, r5
 8003f34:	42a3      	cmp	r3, r4
 8003f36:	6025      	str	r5, [r4, #0]
 8003f38:	bf18      	it	ne
 8003f3a:	6059      	strne	r1, [r3, #4]
 8003f3c:	6863      	ldr	r3, [r4, #4]
 8003f3e:	bf08      	it	eq
 8003f40:	f8c8 1000 	streq.w	r1, [r8]
 8003f44:	5162      	str	r2, [r4, r5]
 8003f46:	604b      	str	r3, [r1, #4]
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f000 f82f 	bl	8003fac <__malloc_unlock>
 8003f4e:	f104 000b 	add.w	r0, r4, #11
 8003f52:	1d23      	adds	r3, r4, #4
 8003f54:	f020 0007 	bic.w	r0, r0, #7
 8003f58:	1ac2      	subs	r2, r0, r3
 8003f5a:	bf1c      	itt	ne
 8003f5c:	1a1b      	subne	r3, r3, r0
 8003f5e:	50a3      	strne	r3, [r4, r2]
 8003f60:	e7af      	b.n	8003ec2 <_malloc_r+0x22>
 8003f62:	6862      	ldr	r2, [r4, #4]
 8003f64:	42a3      	cmp	r3, r4
 8003f66:	bf0c      	ite	eq
 8003f68:	f8c8 2000 	streq.w	r2, [r8]
 8003f6c:	605a      	strne	r2, [r3, #4]
 8003f6e:	e7eb      	b.n	8003f48 <_malloc_r+0xa8>
 8003f70:	4623      	mov	r3, r4
 8003f72:	6864      	ldr	r4, [r4, #4]
 8003f74:	e7ae      	b.n	8003ed4 <_malloc_r+0x34>
 8003f76:	463c      	mov	r4, r7
 8003f78:	687f      	ldr	r7, [r7, #4]
 8003f7a:	e7b6      	b.n	8003eea <_malloc_r+0x4a>
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	42a3      	cmp	r3, r4
 8003f82:	d1fb      	bne.n	8003f7c <_malloc_r+0xdc>
 8003f84:	2300      	movs	r3, #0
 8003f86:	6053      	str	r3, [r2, #4]
 8003f88:	e7de      	b.n	8003f48 <_malloc_r+0xa8>
 8003f8a:	230c      	movs	r3, #12
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	6033      	str	r3, [r6, #0]
 8003f90:	f000 f80c 	bl	8003fac <__malloc_unlock>
 8003f94:	e794      	b.n	8003ec0 <_malloc_r+0x20>
 8003f96:	6005      	str	r5, [r0, #0]
 8003f98:	e7d6      	b.n	8003f48 <_malloc_r+0xa8>
 8003f9a:	bf00      	nop
 8003f9c:	2000072c 	.word	0x2000072c

08003fa0 <__malloc_lock>:
 8003fa0:	4801      	ldr	r0, [pc, #4]	@ (8003fa8 <__malloc_lock+0x8>)
 8003fa2:	f7ff bf11 	b.w	8003dc8 <__retarget_lock_acquire_recursive>
 8003fa6:	bf00      	nop
 8003fa8:	20000724 	.word	0x20000724

08003fac <__malloc_unlock>:
 8003fac:	4801      	ldr	r0, [pc, #4]	@ (8003fb4 <__malloc_unlock+0x8>)
 8003fae:	f7ff bf0c 	b.w	8003dca <__retarget_lock_release_recursive>
 8003fb2:	bf00      	nop
 8003fb4:	20000724 	.word	0x20000724

08003fb8 <__ssputs_r>:
 8003fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fbc:	461f      	mov	r7, r3
 8003fbe:	688e      	ldr	r6, [r1, #8]
 8003fc0:	4682      	mov	sl, r0
 8003fc2:	42be      	cmp	r6, r7
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	4690      	mov	r8, r2
 8003fc8:	680b      	ldr	r3, [r1, #0]
 8003fca:	d82d      	bhi.n	8004028 <__ssputs_r+0x70>
 8003fcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003fd4:	d026      	beq.n	8004024 <__ssputs_r+0x6c>
 8003fd6:	6965      	ldr	r5, [r4, #20]
 8003fd8:	6909      	ldr	r1, [r1, #16]
 8003fda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fde:	eba3 0901 	sub.w	r9, r3, r1
 8003fe2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fe6:	1c7b      	adds	r3, r7, #1
 8003fe8:	444b      	add	r3, r9
 8003fea:	106d      	asrs	r5, r5, #1
 8003fec:	429d      	cmp	r5, r3
 8003fee:	bf38      	it	cc
 8003ff0:	461d      	movcc	r5, r3
 8003ff2:	0553      	lsls	r3, r2, #21
 8003ff4:	d527      	bpl.n	8004046 <__ssputs_r+0x8e>
 8003ff6:	4629      	mov	r1, r5
 8003ff8:	f7ff ff52 	bl	8003ea0 <_malloc_r>
 8003ffc:	4606      	mov	r6, r0
 8003ffe:	b360      	cbz	r0, 800405a <__ssputs_r+0xa2>
 8004000:	464a      	mov	r2, r9
 8004002:	6921      	ldr	r1, [r4, #16]
 8004004:	f000 fafa 	bl	80045fc <memcpy>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800400e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	6126      	str	r6, [r4, #16]
 8004016:	444e      	add	r6, r9
 8004018:	6026      	str	r6, [r4, #0]
 800401a:	463e      	mov	r6, r7
 800401c:	6165      	str	r5, [r4, #20]
 800401e:	eba5 0509 	sub.w	r5, r5, r9
 8004022:	60a5      	str	r5, [r4, #8]
 8004024:	42be      	cmp	r6, r7
 8004026:	d900      	bls.n	800402a <__ssputs_r+0x72>
 8004028:	463e      	mov	r6, r7
 800402a:	4632      	mov	r2, r6
 800402c:	4641      	mov	r1, r8
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	f000 faac 	bl	800458c <memmove>
 8004034:	2000      	movs	r0, #0
 8004036:	68a3      	ldr	r3, [r4, #8]
 8004038:	1b9b      	subs	r3, r3, r6
 800403a:	60a3      	str	r3, [r4, #8]
 800403c:	6823      	ldr	r3, [r4, #0]
 800403e:	4433      	add	r3, r6
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004046:	462a      	mov	r2, r5
 8004048:	f000 fae6 	bl	8004618 <_realloc_r>
 800404c:	4606      	mov	r6, r0
 800404e:	2800      	cmp	r0, #0
 8004050:	d1e0      	bne.n	8004014 <__ssputs_r+0x5c>
 8004052:	4650      	mov	r0, sl
 8004054:	6921      	ldr	r1, [r4, #16]
 8004056:	f7ff feb9 	bl	8003dcc <_free_r>
 800405a:	230c      	movs	r3, #12
 800405c:	f8ca 3000 	str.w	r3, [sl]
 8004060:	89a3      	ldrh	r3, [r4, #12]
 8004062:	f04f 30ff 	mov.w	r0, #4294967295
 8004066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800406a:	81a3      	strh	r3, [r4, #12]
 800406c:	e7e9      	b.n	8004042 <__ssputs_r+0x8a>
	...

08004070 <_svfiprintf_r>:
 8004070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004074:	4698      	mov	r8, r3
 8004076:	898b      	ldrh	r3, [r1, #12]
 8004078:	4607      	mov	r7, r0
 800407a:	061b      	lsls	r3, r3, #24
 800407c:	460d      	mov	r5, r1
 800407e:	4614      	mov	r4, r2
 8004080:	b09d      	sub	sp, #116	@ 0x74
 8004082:	d510      	bpl.n	80040a6 <_svfiprintf_r+0x36>
 8004084:	690b      	ldr	r3, [r1, #16]
 8004086:	b973      	cbnz	r3, 80040a6 <_svfiprintf_r+0x36>
 8004088:	2140      	movs	r1, #64	@ 0x40
 800408a:	f7ff ff09 	bl	8003ea0 <_malloc_r>
 800408e:	6028      	str	r0, [r5, #0]
 8004090:	6128      	str	r0, [r5, #16]
 8004092:	b930      	cbnz	r0, 80040a2 <_svfiprintf_r+0x32>
 8004094:	230c      	movs	r3, #12
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	f04f 30ff 	mov.w	r0, #4294967295
 800409c:	b01d      	add	sp, #116	@ 0x74
 800409e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a2:	2340      	movs	r3, #64	@ 0x40
 80040a4:	616b      	str	r3, [r5, #20]
 80040a6:	2300      	movs	r3, #0
 80040a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80040aa:	2320      	movs	r3, #32
 80040ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80040b0:	2330      	movs	r3, #48	@ 0x30
 80040b2:	f04f 0901 	mov.w	r9, #1
 80040b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80040ba:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004254 <_svfiprintf_r+0x1e4>
 80040be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80040c2:	4623      	mov	r3, r4
 80040c4:	469a      	mov	sl, r3
 80040c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040ca:	b10a      	cbz	r2, 80040d0 <_svfiprintf_r+0x60>
 80040cc:	2a25      	cmp	r2, #37	@ 0x25
 80040ce:	d1f9      	bne.n	80040c4 <_svfiprintf_r+0x54>
 80040d0:	ebba 0b04 	subs.w	fp, sl, r4
 80040d4:	d00b      	beq.n	80040ee <_svfiprintf_r+0x7e>
 80040d6:	465b      	mov	r3, fp
 80040d8:	4622      	mov	r2, r4
 80040da:	4629      	mov	r1, r5
 80040dc:	4638      	mov	r0, r7
 80040de:	f7ff ff6b 	bl	8003fb8 <__ssputs_r>
 80040e2:	3001      	adds	r0, #1
 80040e4:	f000 80a7 	beq.w	8004236 <_svfiprintf_r+0x1c6>
 80040e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80040ea:	445a      	add	r2, fp
 80040ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80040ee:	f89a 3000 	ldrb.w	r3, [sl]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 809f 	beq.w	8004236 <_svfiprintf_r+0x1c6>
 80040f8:	2300      	movs	r3, #0
 80040fa:	f04f 32ff 	mov.w	r2, #4294967295
 80040fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004102:	f10a 0a01 	add.w	sl, sl, #1
 8004106:	9304      	str	r3, [sp, #16]
 8004108:	9307      	str	r3, [sp, #28]
 800410a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800410e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004110:	4654      	mov	r4, sl
 8004112:	2205      	movs	r2, #5
 8004114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004118:	484e      	ldr	r0, [pc, #312]	@ (8004254 <_svfiprintf_r+0x1e4>)
 800411a:	f000 fa61 	bl	80045e0 <memchr>
 800411e:	9a04      	ldr	r2, [sp, #16]
 8004120:	b9d8      	cbnz	r0, 800415a <_svfiprintf_r+0xea>
 8004122:	06d0      	lsls	r0, r2, #27
 8004124:	bf44      	itt	mi
 8004126:	2320      	movmi	r3, #32
 8004128:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800412c:	0711      	lsls	r1, r2, #28
 800412e:	bf44      	itt	mi
 8004130:	232b      	movmi	r3, #43	@ 0x2b
 8004132:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004136:	f89a 3000 	ldrb.w	r3, [sl]
 800413a:	2b2a      	cmp	r3, #42	@ 0x2a
 800413c:	d015      	beq.n	800416a <_svfiprintf_r+0xfa>
 800413e:	4654      	mov	r4, sl
 8004140:	2000      	movs	r0, #0
 8004142:	f04f 0c0a 	mov.w	ip, #10
 8004146:	9a07      	ldr	r2, [sp, #28]
 8004148:	4621      	mov	r1, r4
 800414a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800414e:	3b30      	subs	r3, #48	@ 0x30
 8004150:	2b09      	cmp	r3, #9
 8004152:	d94b      	bls.n	80041ec <_svfiprintf_r+0x17c>
 8004154:	b1b0      	cbz	r0, 8004184 <_svfiprintf_r+0x114>
 8004156:	9207      	str	r2, [sp, #28]
 8004158:	e014      	b.n	8004184 <_svfiprintf_r+0x114>
 800415a:	eba0 0308 	sub.w	r3, r0, r8
 800415e:	fa09 f303 	lsl.w	r3, r9, r3
 8004162:	4313      	orrs	r3, r2
 8004164:	46a2      	mov	sl, r4
 8004166:	9304      	str	r3, [sp, #16]
 8004168:	e7d2      	b.n	8004110 <_svfiprintf_r+0xa0>
 800416a:	9b03      	ldr	r3, [sp, #12]
 800416c:	1d19      	adds	r1, r3, #4
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	9103      	str	r1, [sp, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	bfbb      	ittet	lt
 8004176:	425b      	neglt	r3, r3
 8004178:	f042 0202 	orrlt.w	r2, r2, #2
 800417c:	9307      	strge	r3, [sp, #28]
 800417e:	9307      	strlt	r3, [sp, #28]
 8004180:	bfb8      	it	lt
 8004182:	9204      	strlt	r2, [sp, #16]
 8004184:	7823      	ldrb	r3, [r4, #0]
 8004186:	2b2e      	cmp	r3, #46	@ 0x2e
 8004188:	d10a      	bne.n	80041a0 <_svfiprintf_r+0x130>
 800418a:	7863      	ldrb	r3, [r4, #1]
 800418c:	2b2a      	cmp	r3, #42	@ 0x2a
 800418e:	d132      	bne.n	80041f6 <_svfiprintf_r+0x186>
 8004190:	9b03      	ldr	r3, [sp, #12]
 8004192:	3402      	adds	r4, #2
 8004194:	1d1a      	adds	r2, r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	9203      	str	r2, [sp, #12]
 800419a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800419e:	9305      	str	r3, [sp, #20]
 80041a0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004258 <_svfiprintf_r+0x1e8>
 80041a4:	2203      	movs	r2, #3
 80041a6:	4650      	mov	r0, sl
 80041a8:	7821      	ldrb	r1, [r4, #0]
 80041aa:	f000 fa19 	bl	80045e0 <memchr>
 80041ae:	b138      	cbz	r0, 80041c0 <_svfiprintf_r+0x150>
 80041b0:	2240      	movs	r2, #64	@ 0x40
 80041b2:	9b04      	ldr	r3, [sp, #16]
 80041b4:	eba0 000a 	sub.w	r0, r0, sl
 80041b8:	4082      	lsls	r2, r0
 80041ba:	4313      	orrs	r3, r2
 80041bc:	3401      	adds	r4, #1
 80041be:	9304      	str	r3, [sp, #16]
 80041c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c4:	2206      	movs	r2, #6
 80041c6:	4825      	ldr	r0, [pc, #148]	@ (800425c <_svfiprintf_r+0x1ec>)
 80041c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80041cc:	f000 fa08 	bl	80045e0 <memchr>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d036      	beq.n	8004242 <_svfiprintf_r+0x1d2>
 80041d4:	4b22      	ldr	r3, [pc, #136]	@ (8004260 <_svfiprintf_r+0x1f0>)
 80041d6:	bb1b      	cbnz	r3, 8004220 <_svfiprintf_r+0x1b0>
 80041d8:	9b03      	ldr	r3, [sp, #12]
 80041da:	3307      	adds	r3, #7
 80041dc:	f023 0307 	bic.w	r3, r3, #7
 80041e0:	3308      	adds	r3, #8
 80041e2:	9303      	str	r3, [sp, #12]
 80041e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041e6:	4433      	add	r3, r6
 80041e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ea:	e76a      	b.n	80040c2 <_svfiprintf_r+0x52>
 80041ec:	460c      	mov	r4, r1
 80041ee:	2001      	movs	r0, #1
 80041f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80041f4:	e7a8      	b.n	8004148 <_svfiprintf_r+0xd8>
 80041f6:	2300      	movs	r3, #0
 80041f8:	f04f 0c0a 	mov.w	ip, #10
 80041fc:	4619      	mov	r1, r3
 80041fe:	3401      	adds	r4, #1
 8004200:	9305      	str	r3, [sp, #20]
 8004202:	4620      	mov	r0, r4
 8004204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004208:	3a30      	subs	r2, #48	@ 0x30
 800420a:	2a09      	cmp	r2, #9
 800420c:	d903      	bls.n	8004216 <_svfiprintf_r+0x1a6>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0c6      	beq.n	80041a0 <_svfiprintf_r+0x130>
 8004212:	9105      	str	r1, [sp, #20]
 8004214:	e7c4      	b.n	80041a0 <_svfiprintf_r+0x130>
 8004216:	4604      	mov	r4, r0
 8004218:	2301      	movs	r3, #1
 800421a:	fb0c 2101 	mla	r1, ip, r1, r2
 800421e:	e7f0      	b.n	8004202 <_svfiprintf_r+0x192>
 8004220:	ab03      	add	r3, sp, #12
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	462a      	mov	r2, r5
 8004226:	4638      	mov	r0, r7
 8004228:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <_svfiprintf_r+0x1f4>)
 800422a:	a904      	add	r1, sp, #16
 800422c:	f3af 8000 	nop.w
 8004230:	1c42      	adds	r2, r0, #1
 8004232:	4606      	mov	r6, r0
 8004234:	d1d6      	bne.n	80041e4 <_svfiprintf_r+0x174>
 8004236:	89ab      	ldrh	r3, [r5, #12]
 8004238:	065b      	lsls	r3, r3, #25
 800423a:	f53f af2d 	bmi.w	8004098 <_svfiprintf_r+0x28>
 800423e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004240:	e72c      	b.n	800409c <_svfiprintf_r+0x2c>
 8004242:	ab03      	add	r3, sp, #12
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	462a      	mov	r2, r5
 8004248:	4638      	mov	r0, r7
 800424a:	4b06      	ldr	r3, [pc, #24]	@ (8004264 <_svfiprintf_r+0x1f4>)
 800424c:	a904      	add	r1, sp, #16
 800424e:	f000 f87d 	bl	800434c <_printf_i>
 8004252:	e7ed      	b.n	8004230 <_svfiprintf_r+0x1c0>
 8004254:	080067a2 	.word	0x080067a2
 8004258:	080067a8 	.word	0x080067a8
 800425c:	080067ac 	.word	0x080067ac
 8004260:	00000000 	.word	0x00000000
 8004264:	08003fb9 	.word	0x08003fb9

08004268 <_printf_common>:
 8004268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800426c:	4616      	mov	r6, r2
 800426e:	4698      	mov	r8, r3
 8004270:	688a      	ldr	r2, [r1, #8]
 8004272:	690b      	ldr	r3, [r1, #16]
 8004274:	4607      	mov	r7, r0
 8004276:	4293      	cmp	r3, r2
 8004278:	bfb8      	it	lt
 800427a:	4613      	movlt	r3, r2
 800427c:	6033      	str	r3, [r6, #0]
 800427e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004282:	460c      	mov	r4, r1
 8004284:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004288:	b10a      	cbz	r2, 800428e <_printf_common+0x26>
 800428a:	3301      	adds	r3, #1
 800428c:	6033      	str	r3, [r6, #0]
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	0699      	lsls	r1, r3, #26
 8004292:	bf42      	ittt	mi
 8004294:	6833      	ldrmi	r3, [r6, #0]
 8004296:	3302      	addmi	r3, #2
 8004298:	6033      	strmi	r3, [r6, #0]
 800429a:	6825      	ldr	r5, [r4, #0]
 800429c:	f015 0506 	ands.w	r5, r5, #6
 80042a0:	d106      	bne.n	80042b0 <_printf_common+0x48>
 80042a2:	f104 0a19 	add.w	sl, r4, #25
 80042a6:	68e3      	ldr	r3, [r4, #12]
 80042a8:	6832      	ldr	r2, [r6, #0]
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	42ab      	cmp	r3, r5
 80042ae:	dc2b      	bgt.n	8004308 <_printf_common+0xa0>
 80042b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	3b00      	subs	r3, #0
 80042b8:	bf18      	it	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	0692      	lsls	r2, r2, #26
 80042be:	d430      	bmi.n	8004322 <_printf_common+0xba>
 80042c0:	4641      	mov	r1, r8
 80042c2:	4638      	mov	r0, r7
 80042c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80042c8:	47c8      	blx	r9
 80042ca:	3001      	adds	r0, #1
 80042cc:	d023      	beq.n	8004316 <_printf_common+0xae>
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	6922      	ldr	r2, [r4, #16]
 80042d2:	f003 0306 	and.w	r3, r3, #6
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	bf14      	ite	ne
 80042da:	2500      	movne	r5, #0
 80042dc:	6833      	ldreq	r3, [r6, #0]
 80042de:	f04f 0600 	mov.w	r6, #0
 80042e2:	bf08      	it	eq
 80042e4:	68e5      	ldreq	r5, [r4, #12]
 80042e6:	f104 041a 	add.w	r4, r4, #26
 80042ea:	bf08      	it	eq
 80042ec:	1aed      	subeq	r5, r5, r3
 80042ee:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042f2:	bf08      	it	eq
 80042f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042f8:	4293      	cmp	r3, r2
 80042fa:	bfc4      	itt	gt
 80042fc:	1a9b      	subgt	r3, r3, r2
 80042fe:	18ed      	addgt	r5, r5, r3
 8004300:	42b5      	cmp	r5, r6
 8004302:	d11a      	bne.n	800433a <_printf_common+0xd2>
 8004304:	2000      	movs	r0, #0
 8004306:	e008      	b.n	800431a <_printf_common+0xb2>
 8004308:	2301      	movs	r3, #1
 800430a:	4652      	mov	r2, sl
 800430c:	4641      	mov	r1, r8
 800430e:	4638      	mov	r0, r7
 8004310:	47c8      	blx	r9
 8004312:	3001      	adds	r0, #1
 8004314:	d103      	bne.n	800431e <_printf_common+0xb6>
 8004316:	f04f 30ff 	mov.w	r0, #4294967295
 800431a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800431e:	3501      	adds	r5, #1
 8004320:	e7c1      	b.n	80042a6 <_printf_common+0x3e>
 8004322:	2030      	movs	r0, #48	@ 0x30
 8004324:	18e1      	adds	r1, r4, r3
 8004326:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004330:	4422      	add	r2, r4
 8004332:	3302      	adds	r3, #2
 8004334:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004338:	e7c2      	b.n	80042c0 <_printf_common+0x58>
 800433a:	2301      	movs	r3, #1
 800433c:	4622      	mov	r2, r4
 800433e:	4641      	mov	r1, r8
 8004340:	4638      	mov	r0, r7
 8004342:	47c8      	blx	r9
 8004344:	3001      	adds	r0, #1
 8004346:	d0e6      	beq.n	8004316 <_printf_common+0xae>
 8004348:	3601      	adds	r6, #1
 800434a:	e7d9      	b.n	8004300 <_printf_common+0x98>

0800434c <_printf_i>:
 800434c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004350:	7e0f      	ldrb	r7, [r1, #24]
 8004352:	4691      	mov	r9, r2
 8004354:	2f78      	cmp	r7, #120	@ 0x78
 8004356:	4680      	mov	r8, r0
 8004358:	460c      	mov	r4, r1
 800435a:	469a      	mov	sl, r3
 800435c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800435e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004362:	d807      	bhi.n	8004374 <_printf_i+0x28>
 8004364:	2f62      	cmp	r7, #98	@ 0x62
 8004366:	d80a      	bhi.n	800437e <_printf_i+0x32>
 8004368:	2f00      	cmp	r7, #0
 800436a:	f000 80d3 	beq.w	8004514 <_printf_i+0x1c8>
 800436e:	2f58      	cmp	r7, #88	@ 0x58
 8004370:	f000 80ba 	beq.w	80044e8 <_printf_i+0x19c>
 8004374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004378:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800437c:	e03a      	b.n	80043f4 <_printf_i+0xa8>
 800437e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004382:	2b15      	cmp	r3, #21
 8004384:	d8f6      	bhi.n	8004374 <_printf_i+0x28>
 8004386:	a101      	add	r1, pc, #4	@ (adr r1, 800438c <_printf_i+0x40>)
 8004388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800438c:	080043e5 	.word	0x080043e5
 8004390:	080043f9 	.word	0x080043f9
 8004394:	08004375 	.word	0x08004375
 8004398:	08004375 	.word	0x08004375
 800439c:	08004375 	.word	0x08004375
 80043a0:	08004375 	.word	0x08004375
 80043a4:	080043f9 	.word	0x080043f9
 80043a8:	08004375 	.word	0x08004375
 80043ac:	08004375 	.word	0x08004375
 80043b0:	08004375 	.word	0x08004375
 80043b4:	08004375 	.word	0x08004375
 80043b8:	080044fb 	.word	0x080044fb
 80043bc:	08004423 	.word	0x08004423
 80043c0:	080044b5 	.word	0x080044b5
 80043c4:	08004375 	.word	0x08004375
 80043c8:	08004375 	.word	0x08004375
 80043cc:	0800451d 	.word	0x0800451d
 80043d0:	08004375 	.word	0x08004375
 80043d4:	08004423 	.word	0x08004423
 80043d8:	08004375 	.word	0x08004375
 80043dc:	08004375 	.word	0x08004375
 80043e0:	080044bd 	.word	0x080044bd
 80043e4:	6833      	ldr	r3, [r6, #0]
 80043e6:	1d1a      	adds	r2, r3, #4
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6032      	str	r2, [r6, #0]
 80043ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80043f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80043f4:	2301      	movs	r3, #1
 80043f6:	e09e      	b.n	8004536 <_printf_i+0x1ea>
 80043f8:	6833      	ldr	r3, [r6, #0]
 80043fa:	6820      	ldr	r0, [r4, #0]
 80043fc:	1d19      	adds	r1, r3, #4
 80043fe:	6031      	str	r1, [r6, #0]
 8004400:	0606      	lsls	r6, r0, #24
 8004402:	d501      	bpl.n	8004408 <_printf_i+0xbc>
 8004404:	681d      	ldr	r5, [r3, #0]
 8004406:	e003      	b.n	8004410 <_printf_i+0xc4>
 8004408:	0645      	lsls	r5, r0, #25
 800440a:	d5fb      	bpl.n	8004404 <_printf_i+0xb8>
 800440c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004410:	2d00      	cmp	r5, #0
 8004412:	da03      	bge.n	800441c <_printf_i+0xd0>
 8004414:	232d      	movs	r3, #45	@ 0x2d
 8004416:	426d      	negs	r5, r5
 8004418:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800441c:	230a      	movs	r3, #10
 800441e:	4859      	ldr	r0, [pc, #356]	@ (8004584 <_printf_i+0x238>)
 8004420:	e011      	b.n	8004446 <_printf_i+0xfa>
 8004422:	6821      	ldr	r1, [r4, #0]
 8004424:	6833      	ldr	r3, [r6, #0]
 8004426:	0608      	lsls	r0, r1, #24
 8004428:	f853 5b04 	ldr.w	r5, [r3], #4
 800442c:	d402      	bmi.n	8004434 <_printf_i+0xe8>
 800442e:	0649      	lsls	r1, r1, #25
 8004430:	bf48      	it	mi
 8004432:	b2ad      	uxthmi	r5, r5
 8004434:	2f6f      	cmp	r7, #111	@ 0x6f
 8004436:	6033      	str	r3, [r6, #0]
 8004438:	bf14      	ite	ne
 800443a:	230a      	movne	r3, #10
 800443c:	2308      	moveq	r3, #8
 800443e:	4851      	ldr	r0, [pc, #324]	@ (8004584 <_printf_i+0x238>)
 8004440:	2100      	movs	r1, #0
 8004442:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004446:	6866      	ldr	r6, [r4, #4]
 8004448:	2e00      	cmp	r6, #0
 800444a:	bfa8      	it	ge
 800444c:	6821      	ldrge	r1, [r4, #0]
 800444e:	60a6      	str	r6, [r4, #8]
 8004450:	bfa4      	itt	ge
 8004452:	f021 0104 	bicge.w	r1, r1, #4
 8004456:	6021      	strge	r1, [r4, #0]
 8004458:	b90d      	cbnz	r5, 800445e <_printf_i+0x112>
 800445a:	2e00      	cmp	r6, #0
 800445c:	d04b      	beq.n	80044f6 <_printf_i+0x1aa>
 800445e:	4616      	mov	r6, r2
 8004460:	fbb5 f1f3 	udiv	r1, r5, r3
 8004464:	fb03 5711 	mls	r7, r3, r1, r5
 8004468:	5dc7      	ldrb	r7, [r0, r7]
 800446a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800446e:	462f      	mov	r7, r5
 8004470:	42bb      	cmp	r3, r7
 8004472:	460d      	mov	r5, r1
 8004474:	d9f4      	bls.n	8004460 <_printf_i+0x114>
 8004476:	2b08      	cmp	r3, #8
 8004478:	d10b      	bne.n	8004492 <_printf_i+0x146>
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	07df      	lsls	r7, r3, #31
 800447e:	d508      	bpl.n	8004492 <_printf_i+0x146>
 8004480:	6923      	ldr	r3, [r4, #16]
 8004482:	6861      	ldr	r1, [r4, #4]
 8004484:	4299      	cmp	r1, r3
 8004486:	bfde      	ittt	le
 8004488:	2330      	movle	r3, #48	@ 0x30
 800448a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800448e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004492:	1b92      	subs	r2, r2, r6
 8004494:	6122      	str	r2, [r4, #16]
 8004496:	464b      	mov	r3, r9
 8004498:	4621      	mov	r1, r4
 800449a:	4640      	mov	r0, r8
 800449c:	f8cd a000 	str.w	sl, [sp]
 80044a0:	aa03      	add	r2, sp, #12
 80044a2:	f7ff fee1 	bl	8004268 <_printf_common>
 80044a6:	3001      	adds	r0, #1
 80044a8:	d14a      	bne.n	8004540 <_printf_i+0x1f4>
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	b004      	add	sp, #16
 80044b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b4:	6823      	ldr	r3, [r4, #0]
 80044b6:	f043 0320 	orr.w	r3, r3, #32
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	2778      	movs	r7, #120	@ 0x78
 80044be:	4832      	ldr	r0, [pc, #200]	@ (8004588 <_printf_i+0x23c>)
 80044c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	6831      	ldr	r1, [r6, #0]
 80044c8:	061f      	lsls	r7, r3, #24
 80044ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80044ce:	d402      	bmi.n	80044d6 <_printf_i+0x18a>
 80044d0:	065f      	lsls	r7, r3, #25
 80044d2:	bf48      	it	mi
 80044d4:	b2ad      	uxthmi	r5, r5
 80044d6:	6031      	str	r1, [r6, #0]
 80044d8:	07d9      	lsls	r1, r3, #31
 80044da:	bf44      	itt	mi
 80044dc:	f043 0320 	orrmi.w	r3, r3, #32
 80044e0:	6023      	strmi	r3, [r4, #0]
 80044e2:	b11d      	cbz	r5, 80044ec <_printf_i+0x1a0>
 80044e4:	2310      	movs	r3, #16
 80044e6:	e7ab      	b.n	8004440 <_printf_i+0xf4>
 80044e8:	4826      	ldr	r0, [pc, #152]	@ (8004584 <_printf_i+0x238>)
 80044ea:	e7e9      	b.n	80044c0 <_printf_i+0x174>
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	f023 0320 	bic.w	r3, r3, #32
 80044f2:	6023      	str	r3, [r4, #0]
 80044f4:	e7f6      	b.n	80044e4 <_printf_i+0x198>
 80044f6:	4616      	mov	r6, r2
 80044f8:	e7bd      	b.n	8004476 <_printf_i+0x12a>
 80044fa:	6833      	ldr	r3, [r6, #0]
 80044fc:	6825      	ldr	r5, [r4, #0]
 80044fe:	1d18      	adds	r0, r3, #4
 8004500:	6961      	ldr	r1, [r4, #20]
 8004502:	6030      	str	r0, [r6, #0]
 8004504:	062e      	lsls	r6, r5, #24
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	d501      	bpl.n	800450e <_printf_i+0x1c2>
 800450a:	6019      	str	r1, [r3, #0]
 800450c:	e002      	b.n	8004514 <_printf_i+0x1c8>
 800450e:	0668      	lsls	r0, r5, #25
 8004510:	d5fb      	bpl.n	800450a <_printf_i+0x1be>
 8004512:	8019      	strh	r1, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	4616      	mov	r6, r2
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	e7bc      	b.n	8004496 <_printf_i+0x14a>
 800451c:	6833      	ldr	r3, [r6, #0]
 800451e:	2100      	movs	r1, #0
 8004520:	1d1a      	adds	r2, r3, #4
 8004522:	6032      	str	r2, [r6, #0]
 8004524:	681e      	ldr	r6, [r3, #0]
 8004526:	6862      	ldr	r2, [r4, #4]
 8004528:	4630      	mov	r0, r6
 800452a:	f000 f859 	bl	80045e0 <memchr>
 800452e:	b108      	cbz	r0, 8004534 <_printf_i+0x1e8>
 8004530:	1b80      	subs	r0, r0, r6
 8004532:	6060      	str	r0, [r4, #4]
 8004534:	6863      	ldr	r3, [r4, #4]
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	2300      	movs	r3, #0
 800453a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800453e:	e7aa      	b.n	8004496 <_printf_i+0x14a>
 8004540:	4632      	mov	r2, r6
 8004542:	4649      	mov	r1, r9
 8004544:	4640      	mov	r0, r8
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	47d0      	blx	sl
 800454a:	3001      	adds	r0, #1
 800454c:	d0ad      	beq.n	80044aa <_printf_i+0x15e>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	079b      	lsls	r3, r3, #30
 8004552:	d413      	bmi.n	800457c <_printf_i+0x230>
 8004554:	68e0      	ldr	r0, [r4, #12]
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	4298      	cmp	r0, r3
 800455a:	bfb8      	it	lt
 800455c:	4618      	movlt	r0, r3
 800455e:	e7a6      	b.n	80044ae <_printf_i+0x162>
 8004560:	2301      	movs	r3, #1
 8004562:	4632      	mov	r2, r6
 8004564:	4649      	mov	r1, r9
 8004566:	4640      	mov	r0, r8
 8004568:	47d0      	blx	sl
 800456a:	3001      	adds	r0, #1
 800456c:	d09d      	beq.n	80044aa <_printf_i+0x15e>
 800456e:	3501      	adds	r5, #1
 8004570:	68e3      	ldr	r3, [r4, #12]
 8004572:	9903      	ldr	r1, [sp, #12]
 8004574:	1a5b      	subs	r3, r3, r1
 8004576:	42ab      	cmp	r3, r5
 8004578:	dcf2      	bgt.n	8004560 <_printf_i+0x214>
 800457a:	e7eb      	b.n	8004554 <_printf_i+0x208>
 800457c:	2500      	movs	r5, #0
 800457e:	f104 0619 	add.w	r6, r4, #25
 8004582:	e7f5      	b.n	8004570 <_printf_i+0x224>
 8004584:	080067b3 	.word	0x080067b3
 8004588:	080067c4 	.word	0x080067c4

0800458c <memmove>:
 800458c:	4288      	cmp	r0, r1
 800458e:	b510      	push	{r4, lr}
 8004590:	eb01 0402 	add.w	r4, r1, r2
 8004594:	d902      	bls.n	800459c <memmove+0x10>
 8004596:	4284      	cmp	r4, r0
 8004598:	4623      	mov	r3, r4
 800459a:	d807      	bhi.n	80045ac <memmove+0x20>
 800459c:	1e43      	subs	r3, r0, #1
 800459e:	42a1      	cmp	r1, r4
 80045a0:	d008      	beq.n	80045b4 <memmove+0x28>
 80045a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045aa:	e7f8      	b.n	800459e <memmove+0x12>
 80045ac:	4601      	mov	r1, r0
 80045ae:	4402      	add	r2, r0
 80045b0:	428a      	cmp	r2, r1
 80045b2:	d100      	bne.n	80045b6 <memmove+0x2a>
 80045b4:	bd10      	pop	{r4, pc}
 80045b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045be:	e7f7      	b.n	80045b0 <memmove+0x24>

080045c0 <_sbrk_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	2300      	movs	r3, #0
 80045c4:	4d05      	ldr	r5, [pc, #20]	@ (80045dc <_sbrk_r+0x1c>)
 80045c6:	4604      	mov	r4, r0
 80045c8:	4608      	mov	r0, r1
 80045ca:	602b      	str	r3, [r5, #0]
 80045cc:	f7fd f9bc 	bl	8001948 <_sbrk>
 80045d0:	1c43      	adds	r3, r0, #1
 80045d2:	d102      	bne.n	80045da <_sbrk_r+0x1a>
 80045d4:	682b      	ldr	r3, [r5, #0]
 80045d6:	b103      	cbz	r3, 80045da <_sbrk_r+0x1a>
 80045d8:	6023      	str	r3, [r4, #0]
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	20000720 	.word	0x20000720

080045e0 <memchr>:
 80045e0:	4603      	mov	r3, r0
 80045e2:	b510      	push	{r4, lr}
 80045e4:	b2c9      	uxtb	r1, r1
 80045e6:	4402      	add	r2, r0
 80045e8:	4293      	cmp	r3, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	d101      	bne.n	80045f2 <memchr+0x12>
 80045ee:	2000      	movs	r0, #0
 80045f0:	e003      	b.n	80045fa <memchr+0x1a>
 80045f2:	7804      	ldrb	r4, [r0, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	428c      	cmp	r4, r1
 80045f8:	d1f6      	bne.n	80045e8 <memchr+0x8>
 80045fa:	bd10      	pop	{r4, pc}

080045fc <memcpy>:
 80045fc:	440a      	add	r2, r1
 80045fe:	4291      	cmp	r1, r2
 8004600:	f100 33ff 	add.w	r3, r0, #4294967295
 8004604:	d100      	bne.n	8004608 <memcpy+0xc>
 8004606:	4770      	bx	lr
 8004608:	b510      	push	{r4, lr}
 800460a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800460e:	4291      	cmp	r1, r2
 8004610:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004614:	d1f9      	bne.n	800460a <memcpy+0xe>
 8004616:	bd10      	pop	{r4, pc}

08004618 <_realloc_r>:
 8004618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800461c:	4680      	mov	r8, r0
 800461e:	4615      	mov	r5, r2
 8004620:	460c      	mov	r4, r1
 8004622:	b921      	cbnz	r1, 800462e <_realloc_r+0x16>
 8004624:	4611      	mov	r1, r2
 8004626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800462a:	f7ff bc39 	b.w	8003ea0 <_malloc_r>
 800462e:	b92a      	cbnz	r2, 800463c <_realloc_r+0x24>
 8004630:	f7ff fbcc 	bl	8003dcc <_free_r>
 8004634:	2400      	movs	r4, #0
 8004636:	4620      	mov	r0, r4
 8004638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800463c:	f000 f81a 	bl	8004674 <_malloc_usable_size_r>
 8004640:	4285      	cmp	r5, r0
 8004642:	4606      	mov	r6, r0
 8004644:	d802      	bhi.n	800464c <_realloc_r+0x34>
 8004646:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800464a:	d8f4      	bhi.n	8004636 <_realloc_r+0x1e>
 800464c:	4629      	mov	r1, r5
 800464e:	4640      	mov	r0, r8
 8004650:	f7ff fc26 	bl	8003ea0 <_malloc_r>
 8004654:	4607      	mov	r7, r0
 8004656:	2800      	cmp	r0, #0
 8004658:	d0ec      	beq.n	8004634 <_realloc_r+0x1c>
 800465a:	42b5      	cmp	r5, r6
 800465c:	462a      	mov	r2, r5
 800465e:	4621      	mov	r1, r4
 8004660:	bf28      	it	cs
 8004662:	4632      	movcs	r2, r6
 8004664:	f7ff ffca 	bl	80045fc <memcpy>
 8004668:	4621      	mov	r1, r4
 800466a:	4640      	mov	r0, r8
 800466c:	f7ff fbae 	bl	8003dcc <_free_r>
 8004670:	463c      	mov	r4, r7
 8004672:	e7e0      	b.n	8004636 <_realloc_r+0x1e>

08004674 <_malloc_usable_size_r>:
 8004674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004678:	1f18      	subs	r0, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	bfbc      	itt	lt
 800467e:	580b      	ldrlt	r3, [r1, r0]
 8004680:	18c0      	addlt	r0, r0, r3
 8004682:	4770      	bx	lr

08004684 <_init>:
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004686:	bf00      	nop
 8004688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468a:	bc08      	pop	{r3}
 800468c:	469e      	mov	lr, r3
 800468e:	4770      	bx	lr

08004690 <_fini>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	bf00      	nop
 8004694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004696:	bc08      	pop	{r3}
 8004698:	469e      	mov	lr, r3
 800469a:	4770      	bx	lr
